// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GraphCalcTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// FourGreaterThanTwo
        /// </summary>
        public void FourGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(463, 352));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(454, 198));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(506, 370));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(596, 411));
        }
        
        /// <summary>
        /// AssertFourGreaterThanTwo - Use 'AssertFourGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFourGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '4>2
            //1.000000000000000
            //
            //'
            Assert.AreEqual(this.AssertFourGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Output");
        }
        
        /// <summary>
        /// FourGreaterThanTwo2
        /// </summary>
        public void FourGreaterThanTwo2()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(409, 237));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(409, 242));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(409, 242));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(462, 357));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(466, 198));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(503, 371));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 407));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(417, 243));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(417, 243));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(417, 243));
        }
        
        /// <summary>
        /// FourGreaterThanTwo3 - Use 'FourGreaterThanTwo3Params' to pass parameters into this method.
        /// </summary>
        public void FourGreaterThanTwo3()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select '4>2' in combo box
            uIItemComboBox.EditableItem = this.FourGreaterThanTwo3Params.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(614, 401));
        }
        
        /// <summary>
        /// AssertFourGreaterThanTwo2 - Use 'AssertFourGreaterThanTwo2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFourGreaterThanTwo2()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '4>2
            //1.000000000000000
            //
            //'
            Assert.AreEqual(this.AssertFourGreaterThanTwo2ExpectedValues.UIItemEditText, uIItemEdit.Text, "Is not Equal");
        }
        
        /// <summary>
        /// To test if Two is Greater than Two, expect 0
        /// </summary>
        public void TestTwoGreaterThanTwo()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select '2>2' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 405));
        }
        
        /// <summary>
        /// Assert Two is not Greater than Two, expect 0
        /// </summary>
        public void AssertTwoGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>2
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// Test one greater than two, expect 0
        /// </summary>
        public void TestOneGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(455, 374));

            // Select '1>2' in combo box
            uIItemComboBox.EditableItem = this.TestOneGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(596, 411));
        }
        
        /// <summary>
        /// AssertOneGreaterThanTwo - Use 'AssertOneGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOneGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1>2
            //0
            //
            //'
            Assert.AreEqual(this.AssertOneGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect answer");
        }
        
        /// <summary>
        /// Test that zero is greater than minus one, expect 1
        /// </summary>
        public void TestZeroGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 400));

            // Select '0>-1' in combo box
            uIItemComboBox.EditableItem = this.TestZeroGreaterThanMinusOneParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(604, 411));

            // Press keyboard shortcut keys 'Windows + z'
            Keyboard.SendKeys(this.TestZeroGreaterThanMinusOneParams.SendKeys, ModifierKeys.Windows);
        }
        
        /// <summary>
        /// AssertZeroGreaterThanMinusOne - Use 'AssertZeroGreaterThanMinusOneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertZeroGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '0>-1
            //1
            //
            //'
            Assert.AreEqual(this.AssertZeroGreaterThanMinusOneExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestMinusOneGreaterThanMinusTwo - Use 'TestMinusOneGreaterThanMinusTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestMinusOneGreaterThanMinusTwo()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select '-1>-2' in combo box
            uIItemComboBox.EditableItem = this.TestMinusOneGreaterThanMinusTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(603, 410));

            // Press keyboard shortcut keys 'Windows + z'
            Keyboard.SendKeys(this.TestMinusOneGreaterThanMinusTwoParams.SendKeys, ModifierKeys.Windows);
        }
        
        /// <summary>
        /// AssertMinusOneGreaterThanMinusTwo - Use 'AssertMinusOneGreaterThanMinusTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMinusOneGreaterThanMinusTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '-1>-2
            //1
            //
            //'
            Assert.AreEqual(this.AssertMinusOneGreaterThanMinusTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestMinusTwoGreaterThanMinusOne - Use 'TestMinusTwoGreaterThanMinusOneParams' to pass parameters into this method.
        /// </summary>
        public void TestMinusTwoGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(507, 297));

            // Select '(-2)' in combo box
            uIItemComboBox.EditableItem = this.TestMinusTwoGreaterThanMinusOneParams.UIItemComboBoxEditableItem;

            // Select '(-2)>-1' in combo box
            uIItemComboBox.EditableItem = this.TestMinusTwoGreaterThanMinusOneParams.UIItemComboBoxEditableItem1;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(612, 411));
        }
        
        /// <summary>
        /// AssertMinusTwoGreaterThanMinusOne - Use 'AssertMinusTwoGreaterThanMinusOneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMinusTwoGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(-2)>-1
            //0
            //
            //'
            Assert.AreEqual(this.AssertMinusTwoGreaterThanMinusOneExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestMinusOneGreaterThanZero - Use 'TestMinusOneGreaterThanZeroParams' to pass parameters into this method.
        /// </summary>
        public void TestMinusOneGreaterThanZero()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(500, 297));

            // Select '(-1)>0' in combo box
            uIItemComboBox.EditableItem = this.TestMinusOneGreaterThanZeroParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(608, 407));
        }
        
        /// <summary>
        /// AssertMinusOneGreaterThanZero - Use 'AssertMinusOneGreaterThanZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMinusOneGreaterThanZero()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(-1)>0
            //0
            //
            //'
            Assert.AreEqual(this.AssertMinusOneGreaterThanZeroExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// TestZeroGreaterThanZero - Use 'TestZeroGreaterThanZeroParams' to pass parameters into this method.
        /// </summary>
        public void TestZeroGreaterThanZero()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(448, 404));

            // Press keyboard shortcut keys 'Windows + .'
            Keyboard.SendKeys(this.TestZeroGreaterThanZeroParams.SendKeys, ModifierKeys.Windows);

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(448, 404));

            // Select '0>' in combo box
            uIItemComboBox.EditableItem = this.TestZeroGreaterThanZeroParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(448, 404));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(598, 403));
        }
        
        /// <summary>
        /// AssertZeroGreaterThanZero - Use 'AssertZeroGreaterThanZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertZeroGreaterThanZero()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '0>0
            //0
            //
            //'
            Assert.AreEqual(this.AssertZeroGreaterThanZeroExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");

            // Verify that the 'Text' property of text box equals '0>0
            //0
            //
            //'
            Assert.AreEqual(this.AssertZeroGreaterThanZeroExpectedValues.UIItemEditText1, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTenGreaterThanTwo - Use 'TestTenGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestTenGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(452, 381));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(453, 399));

            // Select '10>' in combo box
            uIItemComboBox.EditableItem = this.TestTenGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(498, 380));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(597, 405));
        }
        
        /// <summary>
        /// AssertTenGreaterThanTwo - Use 'AssertTenGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTenGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '10>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertTenGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestOnehundredGreaterThanTwo - Use 'TestOnehundredGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestOnehundredGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(453, 383));

            // Double-Click 'GraphCalc' Dialog
            Mouse.DoubleClick(uIGraphCalcDialog, new Point(453, 401));

            // Select '100>' in combo box
            uIItemComboBox.EditableItem = this.TestOnehundredGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(498, 378));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(610, 404));
        }
        
        /// <summary>
        /// AssertOnehundredGreaterThanTwo - Use 'AssertOnehundredGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOnehundredGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '100>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertOnehundredGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTwoGreaterThanTen - Use 'TestTwoGreaterThanTenParams' to pass parameters into this method.
        /// </summary>
        public void TestTwoGreaterThanTen()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(501, 376));

            // Select '2>100' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanTenParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(612, 409));
        }
        
        /// <summary>
        /// AssertTwoGreaterThanTen - Use 'AssertTwoGreaterThanTenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTwoGreaterThanTen()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>100
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanTenExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTwoGreaterThanOnehundred - Use 'TestTwoGreaterThanOnehundredParams' to pass parameters into this method.
        /// </summary>
        public void TestTwoGreaterThanOnehundred()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(499, 378));

            // Select '2>100' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanOnehundredParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(587, 405));
        }
        
        /// <summary>
        /// AssertTwoGreaterThanOnehundred - Use 'AssertTwoGreaterThanOnehundredExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTwoGreaterThanOnehundred()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>100
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanOnehundredExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestOnethousandGreaterThanTwo - Use 'TestOnethousandGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestOnethousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(462, 379));

            // Double-Click 'GraphCalc' Dialog
            Mouse.DoubleClick(uIGraphCalcDialog, new Point(461, 400));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(461, 400));

            // Select '1000>2' in combo box
            uIItemComboBox.EditableItem = this.TestOnethousandGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(603, 408));
        }
        
        /// <summary>
        /// AssertOnethousandGreaterThanTwo - Use 'AssertOnethousandGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOnethousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1000>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertOnethousandGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTwoGreaterThanOnethousand - Use 'TestTwoGreaterThanOnethousandParams' to pass parameters into this method.
        /// </summary>
        public void TestTwoGreaterThanOnethousand()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(504, 376));

            // Select '2>1000' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanOnethousandParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(603, 407));
        }
        
        /// <summary>
        /// AssertTwoGreaterThanOnethousand - Use 'AssertTwoGreaterThanOnethousandExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTwoGreaterThanOnethousand()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>1000
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanOnethousandExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTenthousandGreaterThanTwo - Use 'TestTenthousandGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestTenthousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 381));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 399));

            // Double-Click 'GraphCalc' Dialog
            Mouse.DoubleClick(uIGraphCalcDialog, new Point(458, 399));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 399));

            // Select '10000>2' in combo box
            uIItemComboBox.EditableItem = this.TestTenthousandGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 406));
        }
        
        /// <summary>
        /// AssertTenthousandGreaterThanTwo - Use 'AssertTenthousandGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTenthousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '10000>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertTenthousandGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSMinusOne - Use 'TestABSMinusOneParams' to pass parameters into this method.
        /// </summary>
        public void TestABSMinusOne()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(-1)' in combo box
            uIItemComboBox.EditableItem = this.TestABSMinusOneParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 400));
        }
        
        /// <summary>
        /// AssertABSMinusOne - Use 'AssertABSMinusOneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSMinusOne()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(-1)
            //1
            //
            //'
            Assert.AreEqual(this.AssertABSMinusOneExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSOne - Use 'TestABSOneParams' to pass parameters into this method.
        /// </summary>
        public void TestABSOne()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(1)' in combo box
            uIItemComboBox.EditableItem = this.TestABSOneParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(604, 413));
        }
        
        /// <summary>
        /// AssertABSOne - Use 'AssertABSOneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSOne()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(1)
            //1
            //
            //'
            Assert.AreEqual(this.AssertABSOneExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSOnePointTwo - Use 'TestABSOnePointTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestABSOnePointTwo()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(1.2)' in combo box
            uIItemComboBox.EditableItem = this.TestABSOnePointTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(592, 407));
        }
        
        /// <summary>
        /// AssertABSOnePointTwo - Use 'AssertABSOnePointTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSOnePointTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(1.2)
            //1.2
            //
            //'
            Assert.AreEqual(this.AssertABSOnePointTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSMinusOnePointTwo - Use 'TestABSMinusOnePointTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestABSMinusOnePointTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            WinClient uIDesktopClient = this.UIItemWindow.UIItemWindow1.UIDesktopClient;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click text box
            Mouse.Click(uIItemEdit, new Point(26, 10));

            // Type '{NumLock}{NumLock}abs{LShiftKey}{(}-1.2{LShiftKey}{)}' in 'Desktop' client
            Keyboard.SendKeys(uIDesktopClient, this.TestABSMinusOnePointTwoParams.UIDesktopClientSendKeys, ModifierKeys.None);

            // Press keyboard shortcut keys 'Windows + z'
            Keyboard.SendKeys(this.TestABSMinusOnePointTwoParams.SendKeys, ModifierKeys.Windows);

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(597, 409));
        }
        
        /// <summary>
        /// AssertABSMinusOnePointTwo - Use 'AssertABSMinusOnePointTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSMinusOnePointTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(-1.2)
            //1.2
            //
            //'
            Assert.AreEqual(this.AssertABSMinusOnePointTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSOneMillion - Use 'TestABSOneMillionParams' to pass parameters into this method.
        /// </summary>
        public void TestABSOneMillion()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(1000000)' in combo box
            uIItemComboBox.EditableItem = this.TestABSOneMillionParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(589, 402));
        }
        
        /// <summary>
        /// AssertABSOneMillion - Use 'AssertABSOneMillionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSOneMillion()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(1000000)
            //1,000,000
            //
            //'
            Assert.AreEqual(this.AssertABSOneMillionExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSMinusOneMillion - Use 'TestABSMinusOneMillionParams' to pass parameters into this method.
        /// </summary>
        public void TestABSMinusOneMillion()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(-1000000)' in combo box
            uIItemComboBox.EditableItem = this.TestABSMinusOneMillionParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(605, 399));
        }
        
        /// <summary>
        /// AssertABSMinusOneMillion - Use 'AssertABSMinusOneMillionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSMinusOneMillion()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(-1000000)
            //1,000,000
            //
            //'
            Assert.AreEqual(this.AssertABSMinusOneMillionExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSMinusOneMinusThree - Use 'TestABSMinusOneMinusThreeParams' to pass parameters into this method.
        /// </summary>
        public void TestABSMinusOneMinusThree()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(-1-3)' in combo box
            uIItemComboBox.EditableItem = this.TestABSMinusOneMinusThreeParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(601, 411));
        }
        
        /// <summary>
        /// AssertABSMinusOneMinusThree - Use 'AssertABSMinusOneMinusThreeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSMinusOneMinusThree()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(-1-3)
            //4
            //
            //'
            Assert.AreEqual(this.AssertABSMinusOneMinusThreeExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSZero - Use 'TestABSZeroParams' to pass parameters into this method.
        /// </summary>
        public void TestABSZero()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(0)' in combo box
            uIItemComboBox.EditableItem = this.TestABSZeroParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestABSZeroParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertABSZero - Use 'AssertABSZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSZero()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(0)
            //0
            //
            //'
            Assert.AreEqual(this.AssertABSZeroExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSThirty - Use 'TestABSThirtyParams' to pass parameters into this method.
        /// </summary>
        public void TestABSThirty()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(30)' in combo box
            uIItemComboBox.EditableItem = this.TestABSThirtyParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(611, 406));
        }
        
        /// <summary>
        /// AssertABSThirty - Use 'AssertABSThirtyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSThirty()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(30)
            //30
            //
            //'
            Assert.AreEqual(this.AssertABSThirtyExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSMinusThirty - Use 'TestABSMinusThirtyParams' to pass parameters into this method.
        /// </summary>
        public void TestABSMinusThirty()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(-30)' in combo box
            uIItemComboBox.EditableItem = this.TestABSMinusThirtyParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(613, 413));
        }
        
        /// <summary>
        /// AssertABSMinusThirty - Use 'AssertABSMinusThirtyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSMinusThirty()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(-30)
            //30
            //
            //'
            Assert.AreEqual(this.AssertABSMinusThirtyExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSMinusOneFourth - Use 'TestABSMinusOneFourthParams' to pass parameters into this method.
        /// </summary>
        public void TestABSMinusOneFourth()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs((-1)/4)' in combo box
            uIItemComboBox.EditableItem = this.TestABSMinusOneFourthParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(608, 403));
        }
        
        /// <summary>
        /// AssertABSMinusOneFourth - Use 'AssertABSMinusOneFourthExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSMinusOneFourth()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs((-1)/4)
            //0.25
            //
            //'
            Assert.AreEqual(this.AssertABSMinusOneFourthExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSOneFourth - Use 'TestABSOneFourthParams' to pass parameters into this method.
        /// </summary>
        public void TestABSOneFourth()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(1/4)' in combo box
            uIItemComboBox.EditableItem = this.TestABSOneFourthParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(603, 402));
        }
        
        /// <summary>
        /// AssertABSOneFourth - Use 'AssertABSOneFourthExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSOneFourth()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(1/4)
            //0.25
            //
            //'
            Assert.AreEqual(this.AssertABSOneFourthExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestABSOneFifth - Use 'TestABSOneFifthParams' to pass parameters into this method.
        /// </summary>
        public void TestABSOneFifth()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'abs(1/5)' in combo box
            uIItemComboBox.EditableItem = this.TestABSOneFifthParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(594, 399));
        }
        
        /// <summary>
        /// AssertABSOneFifth - Use 'AssertABSOneFifthExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertABSOneFifth()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'abs(1/5)
            //0.2
            //
            //'
            Assert.AreEqual(this.AssertABSOneFifthExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        #region Properties
        public virtual AssertFourGreaterThanTwoExpectedValues AssertFourGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertFourGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertFourGreaterThanTwoExpectedValues = new AssertFourGreaterThanTwoExpectedValues();
                }
                return this.mAssertFourGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual FourGreaterThanTwo3Params FourGreaterThanTwo3Params
        {
            get
            {
                if ((this.mFourGreaterThanTwo3Params == null))
                {
                    this.mFourGreaterThanTwo3Params = new FourGreaterThanTwo3Params();
                }
                return this.mFourGreaterThanTwo3Params;
            }
        }
        
        public virtual AssertFourGreaterThanTwo2ExpectedValues AssertFourGreaterThanTwo2ExpectedValues
        {
            get
            {
                if ((this.mAssertFourGreaterThanTwo2ExpectedValues == null))
                {
                    this.mAssertFourGreaterThanTwo2ExpectedValues = new AssertFourGreaterThanTwo2ExpectedValues();
                }
                return this.mAssertFourGreaterThanTwo2ExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanTwoParams TestTwoGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanTwoParams == null))
                {
                    this.mTestTwoGreaterThanTwoParams = new TestTwoGreaterThanTwoParams();
                }
                return this.mTestTwoGreaterThanTwoParams;
            }
        }
        
        public virtual AssertTwoGreaterThanTwoExpectedValues AssertTwoGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanTwoExpectedValues = new AssertTwoGreaterThanTwoExpectedValues();
                }
                return this.mAssertTwoGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestOneGreaterThanTwoParams TestOneGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestOneGreaterThanTwoParams == null))
                {
                    this.mTestOneGreaterThanTwoParams = new TestOneGreaterThanTwoParams();
                }
                return this.mTestOneGreaterThanTwoParams;
            }
        }
        
        public virtual AssertOneGreaterThanTwoExpectedValues AssertOneGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertOneGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertOneGreaterThanTwoExpectedValues = new AssertOneGreaterThanTwoExpectedValues();
                }
                return this.mAssertOneGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestZeroGreaterThanMinusOneParams TestZeroGreaterThanMinusOneParams
        {
            get
            {
                if ((this.mTestZeroGreaterThanMinusOneParams == null))
                {
                    this.mTestZeroGreaterThanMinusOneParams = new TestZeroGreaterThanMinusOneParams();
                }
                return this.mTestZeroGreaterThanMinusOneParams;
            }
        }
        
        public virtual AssertZeroGreaterThanMinusOneExpectedValues AssertZeroGreaterThanMinusOneExpectedValues
        {
            get
            {
                if ((this.mAssertZeroGreaterThanMinusOneExpectedValues == null))
                {
                    this.mAssertZeroGreaterThanMinusOneExpectedValues = new AssertZeroGreaterThanMinusOneExpectedValues();
                }
                return this.mAssertZeroGreaterThanMinusOneExpectedValues;
            }
        }
        
        public virtual TestMinusOneGreaterThanMinusTwoParams TestMinusOneGreaterThanMinusTwoParams
        {
            get
            {
                if ((this.mTestMinusOneGreaterThanMinusTwoParams == null))
                {
                    this.mTestMinusOneGreaterThanMinusTwoParams = new TestMinusOneGreaterThanMinusTwoParams();
                }
                return this.mTestMinusOneGreaterThanMinusTwoParams;
            }
        }
        
        public virtual AssertMinusOneGreaterThanMinusTwoExpectedValues AssertMinusOneGreaterThanMinusTwoExpectedValues
        {
            get
            {
                if ((this.mAssertMinusOneGreaterThanMinusTwoExpectedValues == null))
                {
                    this.mAssertMinusOneGreaterThanMinusTwoExpectedValues = new AssertMinusOneGreaterThanMinusTwoExpectedValues();
                }
                return this.mAssertMinusOneGreaterThanMinusTwoExpectedValues;
            }
        }
        
        public virtual TestMinusTwoGreaterThanMinusOneParams TestMinusTwoGreaterThanMinusOneParams
        {
            get
            {
                if ((this.mTestMinusTwoGreaterThanMinusOneParams == null))
                {
                    this.mTestMinusTwoGreaterThanMinusOneParams = new TestMinusTwoGreaterThanMinusOneParams();
                }
                return this.mTestMinusTwoGreaterThanMinusOneParams;
            }
        }
        
        public virtual AssertMinusTwoGreaterThanMinusOneExpectedValues AssertMinusTwoGreaterThanMinusOneExpectedValues
        {
            get
            {
                if ((this.mAssertMinusTwoGreaterThanMinusOneExpectedValues == null))
                {
                    this.mAssertMinusTwoGreaterThanMinusOneExpectedValues = new AssertMinusTwoGreaterThanMinusOneExpectedValues();
                }
                return this.mAssertMinusTwoGreaterThanMinusOneExpectedValues;
            }
        }
        
        public virtual TestMinusOneGreaterThanZeroParams TestMinusOneGreaterThanZeroParams
        {
            get
            {
                if ((this.mTestMinusOneGreaterThanZeroParams == null))
                {
                    this.mTestMinusOneGreaterThanZeroParams = new TestMinusOneGreaterThanZeroParams();
                }
                return this.mTestMinusOneGreaterThanZeroParams;
            }
        }
        
        public virtual AssertMinusOneGreaterThanZeroExpectedValues AssertMinusOneGreaterThanZeroExpectedValues
        {
            get
            {
                if ((this.mAssertMinusOneGreaterThanZeroExpectedValues == null))
                {
                    this.mAssertMinusOneGreaterThanZeroExpectedValues = new AssertMinusOneGreaterThanZeroExpectedValues();
                }
                return this.mAssertMinusOneGreaterThanZeroExpectedValues;
            }
        }
        
        public virtual TestZeroGreaterThanZeroParams TestZeroGreaterThanZeroParams
        {
            get
            {
                if ((this.mTestZeroGreaterThanZeroParams == null))
                {
                    this.mTestZeroGreaterThanZeroParams = new TestZeroGreaterThanZeroParams();
                }
                return this.mTestZeroGreaterThanZeroParams;
            }
        }
        
        public virtual AssertZeroGreaterThanZeroExpectedValues AssertZeroGreaterThanZeroExpectedValues
        {
            get
            {
                if ((this.mAssertZeroGreaterThanZeroExpectedValues == null))
                {
                    this.mAssertZeroGreaterThanZeroExpectedValues = new AssertZeroGreaterThanZeroExpectedValues();
                }
                return this.mAssertZeroGreaterThanZeroExpectedValues;
            }
        }
        
        public virtual TestTenGreaterThanTwoParams TestTenGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestTenGreaterThanTwoParams == null))
                {
                    this.mTestTenGreaterThanTwoParams = new TestTenGreaterThanTwoParams();
                }
                return this.mTestTenGreaterThanTwoParams;
            }
        }
        
        public virtual AssertTenGreaterThanTwoExpectedValues AssertTenGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertTenGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertTenGreaterThanTwoExpectedValues = new AssertTenGreaterThanTwoExpectedValues();
                }
                return this.mAssertTenGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestOnehundredGreaterThanTwoParams TestOnehundredGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestOnehundredGreaterThanTwoParams == null))
                {
                    this.mTestOnehundredGreaterThanTwoParams = new TestOnehundredGreaterThanTwoParams();
                }
                return this.mTestOnehundredGreaterThanTwoParams;
            }
        }
        
        public virtual AssertOnehundredGreaterThanTwoExpectedValues AssertOnehundredGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertOnehundredGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertOnehundredGreaterThanTwoExpectedValues = new AssertOnehundredGreaterThanTwoExpectedValues();
                }
                return this.mAssertOnehundredGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanTenParams TestTwoGreaterThanTenParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanTenParams == null))
                {
                    this.mTestTwoGreaterThanTenParams = new TestTwoGreaterThanTenParams();
                }
                return this.mTestTwoGreaterThanTenParams;
            }
        }
        
        public virtual AssertTwoGreaterThanTenExpectedValues AssertTwoGreaterThanTenExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanTenExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanTenExpectedValues = new AssertTwoGreaterThanTenExpectedValues();
                }
                return this.mAssertTwoGreaterThanTenExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanOnehundredParams TestTwoGreaterThanOnehundredParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanOnehundredParams == null))
                {
                    this.mTestTwoGreaterThanOnehundredParams = new TestTwoGreaterThanOnehundredParams();
                }
                return this.mTestTwoGreaterThanOnehundredParams;
            }
        }
        
        public virtual AssertTwoGreaterThanOnehundredExpectedValues AssertTwoGreaterThanOnehundredExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanOnehundredExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanOnehundredExpectedValues = new AssertTwoGreaterThanOnehundredExpectedValues();
                }
                return this.mAssertTwoGreaterThanOnehundredExpectedValues;
            }
        }
        
        public virtual TestOnethousandGreaterThanTwoParams TestOnethousandGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestOnethousandGreaterThanTwoParams == null))
                {
                    this.mTestOnethousandGreaterThanTwoParams = new TestOnethousandGreaterThanTwoParams();
                }
                return this.mTestOnethousandGreaterThanTwoParams;
            }
        }
        
        public virtual AssertOnethousandGreaterThanTwoExpectedValues AssertOnethousandGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertOnethousandGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertOnethousandGreaterThanTwoExpectedValues = new AssertOnethousandGreaterThanTwoExpectedValues();
                }
                return this.mAssertOnethousandGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanOnethousandParams TestTwoGreaterThanOnethousandParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanOnethousandParams == null))
                {
                    this.mTestTwoGreaterThanOnethousandParams = new TestTwoGreaterThanOnethousandParams();
                }
                return this.mTestTwoGreaterThanOnethousandParams;
            }
        }
        
        public virtual AssertTwoGreaterThanOnethousandExpectedValues AssertTwoGreaterThanOnethousandExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanOnethousandExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanOnethousandExpectedValues = new AssertTwoGreaterThanOnethousandExpectedValues();
                }
                return this.mAssertTwoGreaterThanOnethousandExpectedValues;
            }
        }
        
        public virtual TestTenthousandGreaterThanTwoParams TestTenthousandGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestTenthousandGreaterThanTwoParams == null))
                {
                    this.mTestTenthousandGreaterThanTwoParams = new TestTenthousandGreaterThanTwoParams();
                }
                return this.mTestTenthousandGreaterThanTwoParams;
            }
        }
        
        public virtual AssertTenthousandGreaterThanTwoExpectedValues AssertTenthousandGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertTenthousandGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertTenthousandGreaterThanTwoExpectedValues = new AssertTenthousandGreaterThanTwoExpectedValues();
                }
                return this.mAssertTenthousandGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestABSMinusOneParams TestABSMinusOneParams
        {
            get
            {
                if ((this.mTestABSMinusOneParams == null))
                {
                    this.mTestABSMinusOneParams = new TestABSMinusOneParams();
                }
                return this.mTestABSMinusOneParams;
            }
        }
        
        public virtual AssertABSMinusOneExpectedValues AssertABSMinusOneExpectedValues
        {
            get
            {
                if ((this.mAssertABSMinusOneExpectedValues == null))
                {
                    this.mAssertABSMinusOneExpectedValues = new AssertABSMinusOneExpectedValues();
                }
                return this.mAssertABSMinusOneExpectedValues;
            }
        }
        
        public virtual TestABSOneParams TestABSOneParams
        {
            get
            {
                if ((this.mTestABSOneParams == null))
                {
                    this.mTestABSOneParams = new TestABSOneParams();
                }
                return this.mTestABSOneParams;
            }
        }
        
        public virtual AssertABSOneExpectedValues AssertABSOneExpectedValues
        {
            get
            {
                if ((this.mAssertABSOneExpectedValues == null))
                {
                    this.mAssertABSOneExpectedValues = new AssertABSOneExpectedValues();
                }
                return this.mAssertABSOneExpectedValues;
            }
        }
        
        public virtual TestABSOnePointTwoParams TestABSOnePointTwoParams
        {
            get
            {
                if ((this.mTestABSOnePointTwoParams == null))
                {
                    this.mTestABSOnePointTwoParams = new TestABSOnePointTwoParams();
                }
                return this.mTestABSOnePointTwoParams;
            }
        }
        
        public virtual AssertABSOnePointTwoExpectedValues AssertABSOnePointTwoExpectedValues
        {
            get
            {
                if ((this.mAssertABSOnePointTwoExpectedValues == null))
                {
                    this.mAssertABSOnePointTwoExpectedValues = new AssertABSOnePointTwoExpectedValues();
                }
                return this.mAssertABSOnePointTwoExpectedValues;
            }
        }
        
        public virtual TestABSMinusOnePointTwoParams TestABSMinusOnePointTwoParams
        {
            get
            {
                if ((this.mTestABSMinusOnePointTwoParams == null))
                {
                    this.mTestABSMinusOnePointTwoParams = new TestABSMinusOnePointTwoParams();
                }
                return this.mTestABSMinusOnePointTwoParams;
            }
        }
        
        public virtual AssertABSMinusOnePointTwoExpectedValues AssertABSMinusOnePointTwoExpectedValues
        {
            get
            {
                if ((this.mAssertABSMinusOnePointTwoExpectedValues == null))
                {
                    this.mAssertABSMinusOnePointTwoExpectedValues = new AssertABSMinusOnePointTwoExpectedValues();
                }
                return this.mAssertABSMinusOnePointTwoExpectedValues;
            }
        }
        
        public virtual TestABSOneMillionParams TestABSOneMillionParams
        {
            get
            {
                if ((this.mTestABSOneMillionParams == null))
                {
                    this.mTestABSOneMillionParams = new TestABSOneMillionParams();
                }
                return this.mTestABSOneMillionParams;
            }
        }
        
        public virtual AssertABSOneMillionExpectedValues AssertABSOneMillionExpectedValues
        {
            get
            {
                if ((this.mAssertABSOneMillionExpectedValues == null))
                {
                    this.mAssertABSOneMillionExpectedValues = new AssertABSOneMillionExpectedValues();
                }
                return this.mAssertABSOneMillionExpectedValues;
            }
        }
        
        public virtual TestABSMinusOneMillionParams TestABSMinusOneMillionParams
        {
            get
            {
                if ((this.mTestABSMinusOneMillionParams == null))
                {
                    this.mTestABSMinusOneMillionParams = new TestABSMinusOneMillionParams();
                }
                return this.mTestABSMinusOneMillionParams;
            }
        }
        
        public virtual AssertABSMinusOneMillionExpectedValues AssertABSMinusOneMillionExpectedValues
        {
            get
            {
                if ((this.mAssertABSMinusOneMillionExpectedValues == null))
                {
                    this.mAssertABSMinusOneMillionExpectedValues = new AssertABSMinusOneMillionExpectedValues();
                }
                return this.mAssertABSMinusOneMillionExpectedValues;
            }
        }
        
        public virtual TestABSMinusOneMinusThreeParams TestABSMinusOneMinusThreeParams
        {
            get
            {
                if ((this.mTestABSMinusOneMinusThreeParams == null))
                {
                    this.mTestABSMinusOneMinusThreeParams = new TestABSMinusOneMinusThreeParams();
                }
                return this.mTestABSMinusOneMinusThreeParams;
            }
        }
        
        public virtual AssertABSMinusOneMinusThreeExpectedValues AssertABSMinusOneMinusThreeExpectedValues
        {
            get
            {
                if ((this.mAssertABSMinusOneMinusThreeExpectedValues == null))
                {
                    this.mAssertABSMinusOneMinusThreeExpectedValues = new AssertABSMinusOneMinusThreeExpectedValues();
                }
                return this.mAssertABSMinusOneMinusThreeExpectedValues;
            }
        }
        
        public virtual TestABSZeroParams TestABSZeroParams
        {
            get
            {
                if ((this.mTestABSZeroParams == null))
                {
                    this.mTestABSZeroParams = new TestABSZeroParams();
                }
                return this.mTestABSZeroParams;
            }
        }
        
        public virtual AssertABSZeroExpectedValues AssertABSZeroExpectedValues
        {
            get
            {
                if ((this.mAssertABSZeroExpectedValues == null))
                {
                    this.mAssertABSZeroExpectedValues = new AssertABSZeroExpectedValues();
                }
                return this.mAssertABSZeroExpectedValues;
            }
        }
        
        public virtual TestABSThirtyParams TestABSThirtyParams
        {
            get
            {
                if ((this.mTestABSThirtyParams == null))
                {
                    this.mTestABSThirtyParams = new TestABSThirtyParams();
                }
                return this.mTestABSThirtyParams;
            }
        }
        
        public virtual AssertABSThirtyExpectedValues AssertABSThirtyExpectedValues
        {
            get
            {
                if ((this.mAssertABSThirtyExpectedValues == null))
                {
                    this.mAssertABSThirtyExpectedValues = new AssertABSThirtyExpectedValues();
                }
                return this.mAssertABSThirtyExpectedValues;
            }
        }
        
        public virtual TestABSMinusThirtyParams TestABSMinusThirtyParams
        {
            get
            {
                if ((this.mTestABSMinusThirtyParams == null))
                {
                    this.mTestABSMinusThirtyParams = new TestABSMinusThirtyParams();
                }
                return this.mTestABSMinusThirtyParams;
            }
        }
        
        public virtual AssertABSMinusThirtyExpectedValues AssertABSMinusThirtyExpectedValues
        {
            get
            {
                if ((this.mAssertABSMinusThirtyExpectedValues == null))
                {
                    this.mAssertABSMinusThirtyExpectedValues = new AssertABSMinusThirtyExpectedValues();
                }
                return this.mAssertABSMinusThirtyExpectedValues;
            }
        }
        
        public virtual TestABSMinusOneFourthParams TestABSMinusOneFourthParams
        {
            get
            {
                if ((this.mTestABSMinusOneFourthParams == null))
                {
                    this.mTestABSMinusOneFourthParams = new TestABSMinusOneFourthParams();
                }
                return this.mTestABSMinusOneFourthParams;
            }
        }
        
        public virtual AssertABSMinusOneFourthExpectedValues AssertABSMinusOneFourthExpectedValues
        {
            get
            {
                if ((this.mAssertABSMinusOneFourthExpectedValues == null))
                {
                    this.mAssertABSMinusOneFourthExpectedValues = new AssertABSMinusOneFourthExpectedValues();
                }
                return this.mAssertABSMinusOneFourthExpectedValues;
            }
        }
        
        public virtual TestABSOneFourthParams TestABSOneFourthParams
        {
            get
            {
                if ((this.mTestABSOneFourthParams == null))
                {
                    this.mTestABSOneFourthParams = new TestABSOneFourthParams();
                }
                return this.mTestABSOneFourthParams;
            }
        }
        
        public virtual AssertABSOneFourthExpectedValues AssertABSOneFourthExpectedValues
        {
            get
            {
                if ((this.mAssertABSOneFourthExpectedValues == null))
                {
                    this.mAssertABSOneFourthExpectedValues = new AssertABSOneFourthExpectedValues();
                }
                return this.mAssertABSOneFourthExpectedValues;
            }
        }
        
        public virtual TestABSOneFifthParams TestABSOneFifthParams
        {
            get
            {
                if ((this.mTestABSOneFifthParams == null))
                {
                    this.mTestABSOneFifthParams = new TestABSOneFifthParams();
                }
                return this.mTestABSOneFifthParams;
            }
        }
        
        public virtual AssertABSOneFifthExpectedValues AssertABSOneFifthExpectedValues
        {
            get
            {
                if ((this.mAssertABSOneFifthExpectedValues == null))
                {
                    this.mAssertABSOneFifthExpectedValues = new AssertABSOneFifthExpectedValues();
                }
                return this.mAssertABSOneFifthExpectedValues;
            }
        }
        
        public UIGraphCalcWindow UIGraphCalcWindow
        {
            get
            {
                if ((this.mUIGraphCalcWindow == null))
                {
                    this.mUIGraphCalcWindow = new UIGraphCalcWindow();
                }
                return this.mUIGraphCalcWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertFourGreaterThanTwoExpectedValues mAssertFourGreaterThanTwoExpectedValues;
        
        private FourGreaterThanTwo3Params mFourGreaterThanTwo3Params;
        
        private AssertFourGreaterThanTwo2ExpectedValues mAssertFourGreaterThanTwo2ExpectedValues;
        
        private TestTwoGreaterThanTwoParams mTestTwoGreaterThanTwoParams;
        
        private AssertTwoGreaterThanTwoExpectedValues mAssertTwoGreaterThanTwoExpectedValues;
        
        private TestOneGreaterThanTwoParams mTestOneGreaterThanTwoParams;
        
        private AssertOneGreaterThanTwoExpectedValues mAssertOneGreaterThanTwoExpectedValues;
        
        private TestZeroGreaterThanMinusOneParams mTestZeroGreaterThanMinusOneParams;
        
        private AssertZeroGreaterThanMinusOneExpectedValues mAssertZeroGreaterThanMinusOneExpectedValues;
        
        private TestMinusOneGreaterThanMinusTwoParams mTestMinusOneGreaterThanMinusTwoParams;
        
        private AssertMinusOneGreaterThanMinusTwoExpectedValues mAssertMinusOneGreaterThanMinusTwoExpectedValues;
        
        private TestMinusTwoGreaterThanMinusOneParams mTestMinusTwoGreaterThanMinusOneParams;
        
        private AssertMinusTwoGreaterThanMinusOneExpectedValues mAssertMinusTwoGreaterThanMinusOneExpectedValues;
        
        private TestMinusOneGreaterThanZeroParams mTestMinusOneGreaterThanZeroParams;
        
        private AssertMinusOneGreaterThanZeroExpectedValues mAssertMinusOneGreaterThanZeroExpectedValues;
        
        private TestZeroGreaterThanZeroParams mTestZeroGreaterThanZeroParams;
        
        private AssertZeroGreaterThanZeroExpectedValues mAssertZeroGreaterThanZeroExpectedValues;
        
        private TestTenGreaterThanTwoParams mTestTenGreaterThanTwoParams;
        
        private AssertTenGreaterThanTwoExpectedValues mAssertTenGreaterThanTwoExpectedValues;
        
        private TestOnehundredGreaterThanTwoParams mTestOnehundredGreaterThanTwoParams;
        
        private AssertOnehundredGreaterThanTwoExpectedValues mAssertOnehundredGreaterThanTwoExpectedValues;
        
        private TestTwoGreaterThanTenParams mTestTwoGreaterThanTenParams;
        
        private AssertTwoGreaterThanTenExpectedValues mAssertTwoGreaterThanTenExpectedValues;
        
        private TestTwoGreaterThanOnehundredParams mTestTwoGreaterThanOnehundredParams;
        
        private AssertTwoGreaterThanOnehundredExpectedValues mAssertTwoGreaterThanOnehundredExpectedValues;
        
        private TestOnethousandGreaterThanTwoParams mTestOnethousandGreaterThanTwoParams;
        
        private AssertOnethousandGreaterThanTwoExpectedValues mAssertOnethousandGreaterThanTwoExpectedValues;
        
        private TestTwoGreaterThanOnethousandParams mTestTwoGreaterThanOnethousandParams;
        
        private AssertTwoGreaterThanOnethousandExpectedValues mAssertTwoGreaterThanOnethousandExpectedValues;
        
        private TestTenthousandGreaterThanTwoParams mTestTenthousandGreaterThanTwoParams;
        
        private AssertTenthousandGreaterThanTwoExpectedValues mAssertTenthousandGreaterThanTwoExpectedValues;
        
        private TestABSMinusOneParams mTestABSMinusOneParams;
        
        private AssertABSMinusOneExpectedValues mAssertABSMinusOneExpectedValues;
        
        private TestABSOneParams mTestABSOneParams;
        
        private AssertABSOneExpectedValues mAssertABSOneExpectedValues;
        
        private TestABSOnePointTwoParams mTestABSOnePointTwoParams;
        
        private AssertABSOnePointTwoExpectedValues mAssertABSOnePointTwoExpectedValues;
        
        private TestABSMinusOnePointTwoParams mTestABSMinusOnePointTwoParams;
        
        private AssertABSMinusOnePointTwoExpectedValues mAssertABSMinusOnePointTwoExpectedValues;
        
        private TestABSOneMillionParams mTestABSOneMillionParams;
        
        private AssertABSOneMillionExpectedValues mAssertABSOneMillionExpectedValues;
        
        private TestABSMinusOneMillionParams mTestABSMinusOneMillionParams;
        
        private AssertABSMinusOneMillionExpectedValues mAssertABSMinusOneMillionExpectedValues;
        
        private TestABSMinusOneMinusThreeParams mTestABSMinusOneMinusThreeParams;
        
        private AssertABSMinusOneMinusThreeExpectedValues mAssertABSMinusOneMinusThreeExpectedValues;
        
        private TestABSZeroParams mTestABSZeroParams;
        
        private AssertABSZeroExpectedValues mAssertABSZeroExpectedValues;
        
        private TestABSThirtyParams mTestABSThirtyParams;
        
        private AssertABSThirtyExpectedValues mAssertABSThirtyExpectedValues;
        
        private TestABSMinusThirtyParams mTestABSMinusThirtyParams;
        
        private AssertABSMinusThirtyExpectedValues mAssertABSMinusThirtyExpectedValues;
        
        private TestABSMinusOneFourthParams mTestABSMinusOneFourthParams;
        
        private AssertABSMinusOneFourthExpectedValues mAssertABSMinusOneFourthExpectedValues;
        
        private TestABSOneFourthParams mTestABSOneFourthParams;
        
        private AssertABSOneFourthExpectedValues mAssertABSOneFourthExpectedValues;
        
        private TestABSOneFifthParams mTestABSOneFifthParams;
        
        private AssertABSOneFifthExpectedValues mAssertABSOneFifthExpectedValues;
        
        private UIGraphCalcWindow mUIGraphCalcWindow;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFourGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFourGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '4>2
        ///1.000000000000000
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "4>2\n1.000000000000000\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FourGreaterThanTwo3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FourGreaterThanTwo3Params
    {
        
        #region Fields
        /// <summary>
        /// Select '4>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFourGreaterThanTwo2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFourGreaterThanTwo2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '4>2
        ///1.000000000000000
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "4>2\n1.000000000000000\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>2
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>2\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestOneGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOneGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '1>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "1>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOneGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOneGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1>2
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1>2\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestZeroGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestZeroGreaterThanMinusOneParams
    {
        
        #region Fields
        /// <summary>
        /// Select '0>-1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "0>-1";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + z'
        /// </summary>
        public string SendKeys = "z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertZeroGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertZeroGreaterThanMinusOneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0>-1
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "0>-1\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestMinusOneGreaterThanMinusTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestMinusOneGreaterThanMinusTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '-1>-2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "-1>-2";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + z'
        /// </summary>
        public string SendKeys = "z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMinusOneGreaterThanMinusTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMinusOneGreaterThanMinusTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '-1>-2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "-1>-2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestMinusTwoGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestMinusTwoGreaterThanMinusOneParams
    {
        
        #region Fields
        /// <summary>
        /// Select '(-2)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "(-2)";
        
        /// <summary>
        /// Select '(-2)>-1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "(-2)>-1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMinusTwoGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMinusTwoGreaterThanMinusOneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(-2)>-1
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(-2)>-1\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestMinusOneGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestMinusOneGreaterThanZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Select '(-1)>0' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "(-1)>0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMinusOneGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMinusOneGreaterThanZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(-1)>0
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(-1)>0\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestZeroGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestZeroGreaterThanZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + .'
        /// </summary>
        public string SendKeys = ".";
        
        /// <summary>
        /// Select '0>' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "0>";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertZeroGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertZeroGreaterThanZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0>0
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "0>0\n0\n\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0>0
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText1 = "0>0\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTenGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTenGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '10>' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "10>";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTenGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTenGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '10>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "10>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestOnehundredGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOnehundredGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '100>' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "100>";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOnehundredGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOnehundredGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '100>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "100>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanTen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanTenParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>100' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanTen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanTenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>100
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>100\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanOnehundred'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanOnehundredParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>100' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanOnehundred'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanOnehundredExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>100
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>100\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestOnethousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOnethousandGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '1000>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "1000>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOnethousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOnethousandGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1000>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1000>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanOnethousand'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanOnethousandParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>1000' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanOnethousand'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanOnethousandExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>1000
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>1000\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTenthousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTenthousandGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '10000>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "10000>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTenthousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTenthousandGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '10000>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "10000>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSMinusOneParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(-1)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(-1)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSMinusOneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(-1)
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(-1)\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSOneParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(1)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(1)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSOneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(1)
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(1)\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSOnePointTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSOnePointTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(1.2)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(1.2)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSOnePointTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSOnePointTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(1.2)
        ///1.2
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(1.2)\n1.2\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSMinusOnePointTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSMinusOnePointTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumLock}{NumLock}abs{LShiftKey}{(}-1.2{LShiftKey}{)}' in 'Desktop' client
        /// </summary>
        public string UIDesktopClientSendKeys = "{NumLock}{NumLock}abs{LShiftKey}{(}-1.2{LShiftKey}{)}";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + z'
        /// </summary>
        public string SendKeys = "z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSMinusOnePointTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSMinusOnePointTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(-1.2)
        ///1.2
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(-1.2)\n1.2\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSOneMillion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSOneMillionParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(1000000)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(1000000)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSOneMillion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSOneMillionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(1000000)
        ///1,000,000
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(1000000)\n1,000,000\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSMinusOneMillion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSMinusOneMillionParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(-1000000)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(-1000000)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSMinusOneMillion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSMinusOneMillionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(-1000000)
        ///1,000,000
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(-1000000)\n1,000,000\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSMinusOneMinusThree'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSMinusOneMinusThreeParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(-1-3)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(-1-3)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSMinusOneMinusThree'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSMinusOneMinusThreeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(-1-3)
        ///4
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(-1-3)\n4\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(0)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(0)";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(0)
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(0)\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSThirty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSThirtyParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(30)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(30)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSThirty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSThirtyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(30)
        ///30
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(30)\n30\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSMinusThirty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSMinusThirtyParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(-30)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(-30)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSMinusThirty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSMinusThirtyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(-30)
        ///30
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(-30)\n30\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSMinusOneFourth'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSMinusOneFourthParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs((-1)/4)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs((-1)/4)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSMinusOneFourth'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSMinusOneFourthExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs((-1)/4)
        ///0.25
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs((-1)/4)\n0.25\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSOneFourth'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSOneFourthParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(1/4)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(1/4)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSOneFourth'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSOneFourthExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(1/4)
        ///0.25
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(1/4)\n0.25\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestABSOneFifth'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestABSOneFifthParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'abs(1/5)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "abs(1/5)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertABSOneFifth'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertABSOneFifthExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'abs(1/5)
        ///0.2
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "abs(1/5)\n0.2\n\r\n";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGraphCalcWindow : WinWindow
    {
        
        public UIGraphCalcWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GraphCalc";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinControl UIGraphCalcDialog
        {
            get
            {
                if ((this.mUIGraphCalcDialog == null))
                {
                    this.mUIGraphCalcDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIGraphCalcDialog.SearchProperties[UITestControl.PropertyNames.Name] = "GraphCalc";
                    this.mUIGraphCalcDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIGraphCalcDialog.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIGraphCalcDialog;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIGraphCalcDialog;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1003";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "prl_cc_wndclass";
            #endregion
        }
        
        #region Properties
        public WinClient UIDesktopClient
        {
            get
            {
                if ((this.mUIDesktopClient == null))
                {
                    this.mUIDesktopClient = new WinClient(this);
                }
                return this.mUIDesktopClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDesktopClient;
        #endregion
    }
}
