// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GraphCalcTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// FourGreaterThanTwo
        /// </summary>
        public void FourGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(463, 352));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(454, 198));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(506, 370));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(596, 411));
        }
        
        /// <summary>
        /// AssertFourGreaterThanTwo - Use 'AssertFourGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFourGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '4>2
            //1.000000000000000
            //
            //'
            Assert.AreEqual(this.AssertFourGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Output");
        }
        
        /// <summary>
        /// FourGreaterThanTwo2
        /// </summary>
        public void FourGreaterThanTwo2()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(409, 237));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(409, 242));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(409, 242));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(462, 357));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(466, 198));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(503, 371));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 407));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(417, 243));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(417, 243));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(417, 243));
        }
        
        /// <summary>
        /// FourGreaterThanTwo3 - Use 'FourGreaterThanTwo3Params' to pass parameters into this method.
        /// </summary>
        public void FourGreaterThanTwo3()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select '4>2' in combo box
            uIItemComboBox.EditableItem = this.FourGreaterThanTwo3Params.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(614, 401));
        }
        
        /// <summary>
        /// AssertFourGreaterThanTwo2 - Use 'AssertFourGreaterThanTwo2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFourGreaterThanTwo2()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '4>2
            //1.000000000000000
            //
            //'
            Assert.AreEqual(this.AssertFourGreaterThanTwo2ExpectedValues.UIItemEditText, uIItemEdit.Text, "Is not Equal");
        }
        
        /// <summary>
        /// To test if Two is Greater than Two, expect 0
        /// </summary>
        public void TestTwoGreaterThanTwo()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select '2>2' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 405));
        }
        
        /// <summary>
        /// Assert Two is not Greater than Two, expect 0
        /// </summary>
        public void AssertTwoGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>2
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// Test one greater than two, expect 0
        /// </summary>
        public void TestOneGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(455, 374));

            // Select '1>2' in combo box
            uIItemComboBox.EditableItem = this.TestOneGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(596, 411));
        }
        
        /// <summary>
        /// AssertOneGreaterThanTwo - Use 'AssertOneGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOneGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1>2
            //0
            //
            //'
            Assert.AreEqual(this.AssertOneGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect answer");
        }
        
        /// <summary>
        /// Test that zero is greater than minus one, expect 1
        /// </summary>
        public void TestZeroGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 400));

            // Select '0>-1' in combo box
            uIItemComboBox.EditableItem = this.TestZeroGreaterThanMinusOneParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(604, 411));

            // Press keyboard shortcut keys 'Windows + z'
            Keyboard.SendKeys(this.TestZeroGreaterThanMinusOneParams.SendKeys, ModifierKeys.Windows);
        }
        
        /// <summary>
        /// AssertZeroGreaterThanMinusOne - Use 'AssertZeroGreaterThanMinusOneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertZeroGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '0>-1
            //1
            //
            //'
            Assert.AreEqual(this.AssertZeroGreaterThanMinusOneExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestMinusOneGreaterThanMinusTwo - Use 'TestMinusOneGreaterThanMinusTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestMinusOneGreaterThanMinusTwo()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select '-1>-2' in combo box
            uIItemComboBox.EditableItem = this.TestMinusOneGreaterThanMinusTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(603, 410));

            // Press keyboard shortcut keys 'Windows + z'
            Keyboard.SendKeys(this.TestMinusOneGreaterThanMinusTwoParams.SendKeys, ModifierKeys.Windows);
        }
        
        /// <summary>
        /// AssertMinusOneGreaterThanMinusTwo - Use 'AssertMinusOneGreaterThanMinusTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMinusOneGreaterThanMinusTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '-1>-2
            //1
            //
            //'
            Assert.AreEqual(this.AssertMinusOneGreaterThanMinusTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestMinusTwoGreaterThanMinusOne - Use 'TestMinusTwoGreaterThanMinusOneParams' to pass parameters into this method.
        /// </summary>
        public void TestMinusTwoGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(507, 297));

            // Select '(-2)' in combo box
            uIItemComboBox.EditableItem = this.TestMinusTwoGreaterThanMinusOneParams.UIItemComboBoxEditableItem;

            // Select '(-2)>-1' in combo box
            uIItemComboBox.EditableItem = this.TestMinusTwoGreaterThanMinusOneParams.UIItemComboBoxEditableItem1;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(612, 411));
        }
        
        /// <summary>
        /// AssertMinusTwoGreaterThanMinusOne - Use 'AssertMinusTwoGreaterThanMinusOneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMinusTwoGreaterThanMinusOne()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(-2)>-1
            //0
            //
            //'
            Assert.AreEqual(this.AssertMinusTwoGreaterThanMinusOneExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestMinusOneGreaterThanZero - Use 'TestMinusOneGreaterThanZeroParams' to pass parameters into this method.
        /// </summary>
        public void TestMinusOneGreaterThanZero()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(500, 297));

            // Select '(-1)>0' in combo box
            uIItemComboBox.EditableItem = this.TestMinusOneGreaterThanZeroParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(608, 407));
        }
        
        /// <summary>
        /// AssertMinusOneGreaterThanZero - Use 'AssertMinusOneGreaterThanZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMinusOneGreaterThanZero()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(-1)>0
            //0
            //
            //'
            Assert.AreEqual(this.AssertMinusOneGreaterThanZeroExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// TestZeroGreaterThanZero - Use 'TestZeroGreaterThanZeroParams' to pass parameters into this method.
        /// </summary>
        public void TestZeroGreaterThanZero()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(448, 404));

            // Press keyboard shortcut keys 'Windows + .'
            Keyboard.SendKeys(this.TestZeroGreaterThanZeroParams.SendKeys, ModifierKeys.Windows);

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(448, 404));

            // Select '0>' in combo box
            uIItemComboBox.EditableItem = this.TestZeroGreaterThanZeroParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(448, 404));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(598, 403));
        }
        
        /// <summary>
        /// AssertZeroGreaterThanZero - Use 'AssertZeroGreaterThanZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertZeroGreaterThanZero()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '0>0
            //0
            //
            //'
            Assert.AreEqual(this.AssertZeroGreaterThanZeroExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");

            // Verify that the 'Text' property of text box equals '0>0
            //0
            //
            //'
            Assert.AreEqual(this.AssertZeroGreaterThanZeroExpectedValues.UIItemEditText1, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTenGreaterThanTwo - Use 'TestTenGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestTenGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(452, 381));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(453, 399));

            // Select '10>' in combo box
            uIItemComboBox.EditableItem = this.TestTenGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(498, 380));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(597, 405));
        }
        
        /// <summary>
        /// AssertTenGreaterThanTwo - Use 'AssertTenGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTenGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '10>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertTenGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestOnehundredGreaterThanTwo - Use 'TestOnehundredGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestOnehundredGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(453, 383));

            // Double-Click 'GraphCalc' Dialog
            Mouse.DoubleClick(uIGraphCalcDialog, new Point(453, 401));

            // Select '100>' in combo box
            uIItemComboBox.EditableItem = this.TestOnehundredGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(498, 378));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(610, 404));
        }
        
        /// <summary>
        /// AssertOnehundredGreaterThanTwo - Use 'AssertOnehundredGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOnehundredGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '100>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertOnehundredGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTwoGreaterThanTen - Use 'TestTwoGreaterThanTenParams' to pass parameters into this method.
        /// </summary>
        public void TestTwoGreaterThanTen()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(501, 376));

            // Select '2>100' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanTenParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(612, 409));
        }
        
        /// <summary>
        /// AssertTwoGreaterThanTen - Use 'AssertTwoGreaterThanTenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTwoGreaterThanTen()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>100
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanTenExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTwoGreaterThanOnehundred - Use 'TestTwoGreaterThanOnehundredParams' to pass parameters into this method.
        /// </summary>
        public void TestTwoGreaterThanOnehundred()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(499, 378));

            // Select '2>100' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanOnehundredParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(587, 405));
        }
        
        /// <summary>
        /// AssertTwoGreaterThanOnehundred - Use 'AssertTwoGreaterThanOnehundredExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTwoGreaterThanOnehundred()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>100
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanOnehundredExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestOnethousandGreaterThanTwo - Use 'TestOnethousandGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestOnethousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(462, 379));

            // Double-Click 'GraphCalc' Dialog
            Mouse.DoubleClick(uIGraphCalcDialog, new Point(461, 400));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(461, 400));

            // Select '1000>2' in combo box
            uIItemComboBox.EditableItem = this.TestOnethousandGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(603, 408));
        }
        
        /// <summary>
        /// AssertOnethousandGreaterThanTwo - Use 'AssertOnethousandGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOnethousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1000>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertOnethousandGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTwoGreaterThanOnethousand - Use 'TestTwoGreaterThanOnethousandParams' to pass parameters into this method.
        /// </summary>
        public void TestTwoGreaterThanOnethousand()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(504, 376));

            // Select '2>1000' in combo box
            uIItemComboBox.EditableItem = this.TestTwoGreaterThanOnethousandParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(603, 407));
        }
        
        /// <summary>
        /// AssertTwoGreaterThanOnethousand - Use 'AssertTwoGreaterThanOnethousandExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTwoGreaterThanOnethousand()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '2>1000
            //0
            //
            //'
            Assert.AreEqual(this.AssertTwoGreaterThanOnethousandExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        /// <summary>
        /// TestTenthousandGreaterThanTwo - Use 'TestTenthousandGreaterThanTwoParams' to pass parameters into this method.
        /// </summary>
        public void TestTenthousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow1.UIItemComboBox;
            #endregion

            // The recording for the application under test '\\Mac\Desktop\GraphCalc\GrphCalc.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 381));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 399));

            // Double-Click 'GraphCalc' Dialog
            Mouse.DoubleClick(uIGraphCalcDialog, new Point(458, 399));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(458, 399));

            // Select '10000>2' in combo box
            uIItemComboBox.EditableItem = this.TestTenthousandGreaterThanTwoParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 406));
        }
        
        /// <summary>
        /// AssertTenthousandGreaterThanTwo - Use 'AssertTenthousandGreaterThanTwoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTenthousandGreaterThanTwo()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '10000>2
            //1
            //
            //'
            Assert.AreEqual(this.AssertTenthousandGreaterThanTwoExpectedValues.UIItemEditText, uIItemEdit.Text, "Incorrect Answer");
        }
        
        #region Properties
        public virtual AssertFourGreaterThanTwoExpectedValues AssertFourGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertFourGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertFourGreaterThanTwoExpectedValues = new AssertFourGreaterThanTwoExpectedValues();
                }
                return this.mAssertFourGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual FourGreaterThanTwo3Params FourGreaterThanTwo3Params
        {
            get
            {
                if ((this.mFourGreaterThanTwo3Params == null))
                {
                    this.mFourGreaterThanTwo3Params = new FourGreaterThanTwo3Params();
                }
                return this.mFourGreaterThanTwo3Params;
            }
        }
        
        public virtual AssertFourGreaterThanTwo2ExpectedValues AssertFourGreaterThanTwo2ExpectedValues
        {
            get
            {
                if ((this.mAssertFourGreaterThanTwo2ExpectedValues == null))
                {
                    this.mAssertFourGreaterThanTwo2ExpectedValues = new AssertFourGreaterThanTwo2ExpectedValues();
                }
                return this.mAssertFourGreaterThanTwo2ExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanTwoParams TestTwoGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanTwoParams == null))
                {
                    this.mTestTwoGreaterThanTwoParams = new TestTwoGreaterThanTwoParams();
                }
                return this.mTestTwoGreaterThanTwoParams;
            }
        }
        
        public virtual AssertTwoGreaterThanTwoExpectedValues AssertTwoGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanTwoExpectedValues = new AssertTwoGreaterThanTwoExpectedValues();
                }
                return this.mAssertTwoGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestOneGreaterThanTwoParams TestOneGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestOneGreaterThanTwoParams == null))
                {
                    this.mTestOneGreaterThanTwoParams = new TestOneGreaterThanTwoParams();
                }
                return this.mTestOneGreaterThanTwoParams;
            }
        }
        
        public virtual AssertOneGreaterThanTwoExpectedValues AssertOneGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertOneGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertOneGreaterThanTwoExpectedValues = new AssertOneGreaterThanTwoExpectedValues();
                }
                return this.mAssertOneGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestZeroGreaterThanMinusOneParams TestZeroGreaterThanMinusOneParams
        {
            get
            {
                if ((this.mTestZeroGreaterThanMinusOneParams == null))
                {
                    this.mTestZeroGreaterThanMinusOneParams = new TestZeroGreaterThanMinusOneParams();
                }
                return this.mTestZeroGreaterThanMinusOneParams;
            }
        }
        
        public virtual AssertZeroGreaterThanMinusOneExpectedValues AssertZeroGreaterThanMinusOneExpectedValues
        {
            get
            {
                if ((this.mAssertZeroGreaterThanMinusOneExpectedValues == null))
                {
                    this.mAssertZeroGreaterThanMinusOneExpectedValues = new AssertZeroGreaterThanMinusOneExpectedValues();
                }
                return this.mAssertZeroGreaterThanMinusOneExpectedValues;
            }
        }
        
        public virtual TestMinusOneGreaterThanMinusTwoParams TestMinusOneGreaterThanMinusTwoParams
        {
            get
            {
                if ((this.mTestMinusOneGreaterThanMinusTwoParams == null))
                {
                    this.mTestMinusOneGreaterThanMinusTwoParams = new TestMinusOneGreaterThanMinusTwoParams();
                }
                return this.mTestMinusOneGreaterThanMinusTwoParams;
            }
        }
        
        public virtual AssertMinusOneGreaterThanMinusTwoExpectedValues AssertMinusOneGreaterThanMinusTwoExpectedValues
        {
            get
            {
                if ((this.mAssertMinusOneGreaterThanMinusTwoExpectedValues == null))
                {
                    this.mAssertMinusOneGreaterThanMinusTwoExpectedValues = new AssertMinusOneGreaterThanMinusTwoExpectedValues();
                }
                return this.mAssertMinusOneGreaterThanMinusTwoExpectedValues;
            }
        }
        
        public virtual TestMinusTwoGreaterThanMinusOneParams TestMinusTwoGreaterThanMinusOneParams
        {
            get
            {
                if ((this.mTestMinusTwoGreaterThanMinusOneParams == null))
                {
                    this.mTestMinusTwoGreaterThanMinusOneParams = new TestMinusTwoGreaterThanMinusOneParams();
                }
                return this.mTestMinusTwoGreaterThanMinusOneParams;
            }
        }
        
        public virtual AssertMinusTwoGreaterThanMinusOneExpectedValues AssertMinusTwoGreaterThanMinusOneExpectedValues
        {
            get
            {
                if ((this.mAssertMinusTwoGreaterThanMinusOneExpectedValues == null))
                {
                    this.mAssertMinusTwoGreaterThanMinusOneExpectedValues = new AssertMinusTwoGreaterThanMinusOneExpectedValues();
                }
                return this.mAssertMinusTwoGreaterThanMinusOneExpectedValues;
            }
        }
        
        public virtual TestMinusOneGreaterThanZeroParams TestMinusOneGreaterThanZeroParams
        {
            get
            {
                if ((this.mTestMinusOneGreaterThanZeroParams == null))
                {
                    this.mTestMinusOneGreaterThanZeroParams = new TestMinusOneGreaterThanZeroParams();
                }
                return this.mTestMinusOneGreaterThanZeroParams;
            }
        }
        
        public virtual AssertMinusOneGreaterThanZeroExpectedValues AssertMinusOneGreaterThanZeroExpectedValues
        {
            get
            {
                if ((this.mAssertMinusOneGreaterThanZeroExpectedValues == null))
                {
                    this.mAssertMinusOneGreaterThanZeroExpectedValues = new AssertMinusOneGreaterThanZeroExpectedValues();
                }
                return this.mAssertMinusOneGreaterThanZeroExpectedValues;
            }
        }
        
        public virtual TestZeroGreaterThanZeroParams TestZeroGreaterThanZeroParams
        {
            get
            {
                if ((this.mTestZeroGreaterThanZeroParams == null))
                {
                    this.mTestZeroGreaterThanZeroParams = new TestZeroGreaterThanZeroParams();
                }
                return this.mTestZeroGreaterThanZeroParams;
            }
        }
        
        public virtual AssertZeroGreaterThanZeroExpectedValues AssertZeroGreaterThanZeroExpectedValues
        {
            get
            {
                if ((this.mAssertZeroGreaterThanZeroExpectedValues == null))
                {
                    this.mAssertZeroGreaterThanZeroExpectedValues = new AssertZeroGreaterThanZeroExpectedValues();
                }
                return this.mAssertZeroGreaterThanZeroExpectedValues;
            }
        }
        
        public virtual TestTenGreaterThanTwoParams TestTenGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestTenGreaterThanTwoParams == null))
                {
                    this.mTestTenGreaterThanTwoParams = new TestTenGreaterThanTwoParams();
                }
                return this.mTestTenGreaterThanTwoParams;
            }
        }
        
        public virtual AssertTenGreaterThanTwoExpectedValues AssertTenGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertTenGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertTenGreaterThanTwoExpectedValues = new AssertTenGreaterThanTwoExpectedValues();
                }
                return this.mAssertTenGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestOnehundredGreaterThanTwoParams TestOnehundredGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestOnehundredGreaterThanTwoParams == null))
                {
                    this.mTestOnehundredGreaterThanTwoParams = new TestOnehundredGreaterThanTwoParams();
                }
                return this.mTestOnehundredGreaterThanTwoParams;
            }
        }
        
        public virtual AssertOnehundredGreaterThanTwoExpectedValues AssertOnehundredGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertOnehundredGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertOnehundredGreaterThanTwoExpectedValues = new AssertOnehundredGreaterThanTwoExpectedValues();
                }
                return this.mAssertOnehundredGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanTenParams TestTwoGreaterThanTenParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanTenParams == null))
                {
                    this.mTestTwoGreaterThanTenParams = new TestTwoGreaterThanTenParams();
                }
                return this.mTestTwoGreaterThanTenParams;
            }
        }
        
        public virtual AssertTwoGreaterThanTenExpectedValues AssertTwoGreaterThanTenExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanTenExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanTenExpectedValues = new AssertTwoGreaterThanTenExpectedValues();
                }
                return this.mAssertTwoGreaterThanTenExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanOnehundredParams TestTwoGreaterThanOnehundredParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanOnehundredParams == null))
                {
                    this.mTestTwoGreaterThanOnehundredParams = new TestTwoGreaterThanOnehundredParams();
                }
                return this.mTestTwoGreaterThanOnehundredParams;
            }
        }
        
        public virtual AssertTwoGreaterThanOnehundredExpectedValues AssertTwoGreaterThanOnehundredExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanOnehundredExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanOnehundredExpectedValues = new AssertTwoGreaterThanOnehundredExpectedValues();
                }
                return this.mAssertTwoGreaterThanOnehundredExpectedValues;
            }
        }
        
        public virtual TestOnethousandGreaterThanTwoParams TestOnethousandGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestOnethousandGreaterThanTwoParams == null))
                {
                    this.mTestOnethousandGreaterThanTwoParams = new TestOnethousandGreaterThanTwoParams();
                }
                return this.mTestOnethousandGreaterThanTwoParams;
            }
        }
        
        public virtual AssertOnethousandGreaterThanTwoExpectedValues AssertOnethousandGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertOnethousandGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertOnethousandGreaterThanTwoExpectedValues = new AssertOnethousandGreaterThanTwoExpectedValues();
                }
                return this.mAssertOnethousandGreaterThanTwoExpectedValues;
            }
        }
        
        public virtual TestTwoGreaterThanOnethousandParams TestTwoGreaterThanOnethousandParams
        {
            get
            {
                if ((this.mTestTwoGreaterThanOnethousandParams == null))
                {
                    this.mTestTwoGreaterThanOnethousandParams = new TestTwoGreaterThanOnethousandParams();
                }
                return this.mTestTwoGreaterThanOnethousandParams;
            }
        }
        
        public virtual AssertTwoGreaterThanOnethousandExpectedValues AssertTwoGreaterThanOnethousandExpectedValues
        {
            get
            {
                if ((this.mAssertTwoGreaterThanOnethousandExpectedValues == null))
                {
                    this.mAssertTwoGreaterThanOnethousandExpectedValues = new AssertTwoGreaterThanOnethousandExpectedValues();
                }
                return this.mAssertTwoGreaterThanOnethousandExpectedValues;
            }
        }
        
        public virtual TestTenthousandGreaterThanTwoParams TestTenthousandGreaterThanTwoParams
        {
            get
            {
                if ((this.mTestTenthousandGreaterThanTwoParams == null))
                {
                    this.mTestTenthousandGreaterThanTwoParams = new TestTenthousandGreaterThanTwoParams();
                }
                return this.mTestTenthousandGreaterThanTwoParams;
            }
        }
        
        public virtual AssertTenthousandGreaterThanTwoExpectedValues AssertTenthousandGreaterThanTwoExpectedValues
        {
            get
            {
                if ((this.mAssertTenthousandGreaterThanTwoExpectedValues == null))
                {
                    this.mAssertTenthousandGreaterThanTwoExpectedValues = new AssertTenthousandGreaterThanTwoExpectedValues();
                }
                return this.mAssertTenthousandGreaterThanTwoExpectedValues;
            }
        }
        
        public UIGraphCalcWindow UIGraphCalcWindow
        {
            get
            {
                if ((this.mUIGraphCalcWindow == null))
                {
                    this.mUIGraphCalcWindow = new UIGraphCalcWindow();
                }
                return this.mUIGraphCalcWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertFourGreaterThanTwoExpectedValues mAssertFourGreaterThanTwoExpectedValues;
        
        private FourGreaterThanTwo3Params mFourGreaterThanTwo3Params;
        
        private AssertFourGreaterThanTwo2ExpectedValues mAssertFourGreaterThanTwo2ExpectedValues;
        
        private TestTwoGreaterThanTwoParams mTestTwoGreaterThanTwoParams;
        
        private AssertTwoGreaterThanTwoExpectedValues mAssertTwoGreaterThanTwoExpectedValues;
        
        private TestOneGreaterThanTwoParams mTestOneGreaterThanTwoParams;
        
        private AssertOneGreaterThanTwoExpectedValues mAssertOneGreaterThanTwoExpectedValues;
        
        private TestZeroGreaterThanMinusOneParams mTestZeroGreaterThanMinusOneParams;
        
        private AssertZeroGreaterThanMinusOneExpectedValues mAssertZeroGreaterThanMinusOneExpectedValues;
        
        private TestMinusOneGreaterThanMinusTwoParams mTestMinusOneGreaterThanMinusTwoParams;
        
        private AssertMinusOneGreaterThanMinusTwoExpectedValues mAssertMinusOneGreaterThanMinusTwoExpectedValues;
        
        private TestMinusTwoGreaterThanMinusOneParams mTestMinusTwoGreaterThanMinusOneParams;
        
        private AssertMinusTwoGreaterThanMinusOneExpectedValues mAssertMinusTwoGreaterThanMinusOneExpectedValues;
        
        private TestMinusOneGreaterThanZeroParams mTestMinusOneGreaterThanZeroParams;
        
        private AssertMinusOneGreaterThanZeroExpectedValues mAssertMinusOneGreaterThanZeroExpectedValues;
        
        private TestZeroGreaterThanZeroParams mTestZeroGreaterThanZeroParams;
        
        private AssertZeroGreaterThanZeroExpectedValues mAssertZeroGreaterThanZeroExpectedValues;
        
        private TestTenGreaterThanTwoParams mTestTenGreaterThanTwoParams;
        
        private AssertTenGreaterThanTwoExpectedValues mAssertTenGreaterThanTwoExpectedValues;
        
        private TestOnehundredGreaterThanTwoParams mTestOnehundredGreaterThanTwoParams;
        
        private AssertOnehundredGreaterThanTwoExpectedValues mAssertOnehundredGreaterThanTwoExpectedValues;
        
        private TestTwoGreaterThanTenParams mTestTwoGreaterThanTenParams;
        
        private AssertTwoGreaterThanTenExpectedValues mAssertTwoGreaterThanTenExpectedValues;
        
        private TestTwoGreaterThanOnehundredParams mTestTwoGreaterThanOnehundredParams;
        
        private AssertTwoGreaterThanOnehundredExpectedValues mAssertTwoGreaterThanOnehundredExpectedValues;
        
        private TestOnethousandGreaterThanTwoParams mTestOnethousandGreaterThanTwoParams;
        
        private AssertOnethousandGreaterThanTwoExpectedValues mAssertOnethousandGreaterThanTwoExpectedValues;
        
        private TestTwoGreaterThanOnethousandParams mTestTwoGreaterThanOnethousandParams;
        
        private AssertTwoGreaterThanOnethousandExpectedValues mAssertTwoGreaterThanOnethousandExpectedValues;
        
        private TestTenthousandGreaterThanTwoParams mTestTenthousandGreaterThanTwoParams;
        
        private AssertTenthousandGreaterThanTwoExpectedValues mAssertTenthousandGreaterThanTwoExpectedValues;
        
        private UIGraphCalcWindow mUIGraphCalcWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFourGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFourGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '4>2
        ///1.000000000000000
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "4>2\n1.000000000000000\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FourGreaterThanTwo3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FourGreaterThanTwo3Params
    {
        
        #region Fields
        /// <summary>
        /// Select '4>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFourGreaterThanTwo2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFourGreaterThanTwo2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '4>2
        ///1.000000000000000
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "4>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>2
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>2\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestOneGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOneGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '1>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "1>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOneGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOneGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1>2
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1>2\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestZeroGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestZeroGreaterThanMinusOneParams
    {
        
        #region Fields
        /// <summary>
        /// Select '0>-1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "0>-1";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + z'
        /// </summary>
        public string SendKeys = "z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertZeroGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertZeroGreaterThanMinusOneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0>-1
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "0>-1\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestMinusOneGreaterThanMinusTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestMinusOneGreaterThanMinusTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '-1>-2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "(-1)>-2";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + z'
        /// </summary>
        public string SendKeys = "z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMinusOneGreaterThanMinusTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMinusOneGreaterThanMinusTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '-1>-2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(-1)>-2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestMinusTwoGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestMinusTwoGreaterThanMinusOneParams
    {
        
        #region Fields
        /// <summary>
        /// Select '(-2)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "(-2)";
        
        /// <summary>
        /// Select '(-2)>-1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "(-2)>-1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMinusTwoGreaterThanMinusOne'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMinusTwoGreaterThanMinusOneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(-2)>-1
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(-2)>-1\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestMinusOneGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestMinusOneGreaterThanZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Select '(-1)>0' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "(-1)>0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMinusOneGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMinusOneGreaterThanZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(-1)>0
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(-1)>0\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestZeroGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestZeroGreaterThanZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + .'
        /// </summary>
        public string SendKeys = ".";
        
        /// <summary>
        /// Select '0>' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "0>";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertZeroGreaterThanZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertZeroGreaterThanZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0>0
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "0>0\n0\n\r\n";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0>0
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText1 = "0>0\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTenGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTenGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '10>' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "10>";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTenGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTenGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '10>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "10>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestOnehundredGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOnehundredGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '100>' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "100>";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOnehundredGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOnehundredGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '100>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "100>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanTen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanTenParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>100' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanTen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanTenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>100
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>100\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanOnehundred'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanOnehundredParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>100' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanOnehundred'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanOnehundredExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>100
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>100\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestOnethousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOnethousandGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '1000>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "1000>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOnethousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOnethousandGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1000>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1000>2\n1\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTwoGreaterThanOnethousand'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTwoGreaterThanOnethousandParams
    {
        
        #region Fields
        /// <summary>
        /// Select '2>1000' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "2>1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTwoGreaterThanOnethousand'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTwoGreaterThanOnethousandExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '2>1000
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "2>1000\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestTenthousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestTenthousandGreaterThanTwoParams
    {
        
        #region Fields
        /// <summary>
        /// Select '10000>2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "10000>2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTenthousandGreaterThanTwo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTenthousandGreaterThanTwoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '10000>2
        ///1
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "10000>2\n1\n\r\n";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGraphCalcWindow : WinWindow
    {
        
        public UIGraphCalcWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GraphCalc";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinControl UIGraphCalcDialog
        {
            get
            {
                if ((this.mUIGraphCalcDialog == null))
                {
                    this.mUIGraphCalcDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIGraphCalcDialog.SearchProperties[UITestControl.PropertyNames.Name] = "GraphCalc";
                    this.mUIGraphCalcDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIGraphCalcDialog.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIGraphCalcDialog;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIGraphCalcDialog;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1003";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
}
