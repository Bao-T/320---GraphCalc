// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Addition - Use 'AdditionParams' to pass parameters into this method.
        /// </summary>
        public void Addition()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '1+2' in combo box
            uIItemComboBox.EditableItem = this.AdditionParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.AdditionParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertAddition - Use 'AssertAdditionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAddition()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1+2
            //3
            //
            //'
            Assert.AreEqual(this.AssertAdditionExpectedValues.UIItemEditText, uIItemEdit.Text, "The Ouput is wrong");
        }
        
        /// <summary>
        /// AssertConvertBase100000
        /// </summary>
        public void AssertConvertBase100000()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'null'
            Assert.IsNull(uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertConvertBase1to36 - Use 'AssertConvertBase1to36ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBase1to36()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '0 convbase1
            //01
            //0convbase2
            //02
            //0convbase3
            //03
            //0convbase4
            //04
            //0convbase5
            //05
            //0convbase6
            //06
            //0convbase7
            //07
            //0convbase8
            //08
            //0convbase9
            //09
            //0convbase10
            //010
            //0convbase11
            //011
            //0convbase12
            //012
            //0convbase13
            //013
            //0convbase14
            //014
            //0convbase14
            //014
            //0convbase15
            //015
            //0convbase16
            //016
            //0convbase17
            //017
            //0convbase18
            //018
            //0convbase19
            //019
            //0convbase20
            //020
            //0convbase21
            //021
            //0convbase22
            //022
            //0convbase23
            //023
            //0convbase24
            //024
            //0convbase25
            //025
            //0convbase26
            //026
            //0convbase27
            //027
            //0convbase28
            //028
            //0convbase29
            //029
            //0convbase30
            //030
            //0convbase31
            //031
            //0convbase32
            //032
            //0convbase33
            //033
            //0convbase34
            //034
            //0convbase35
            //035
            //0convbase36
            //036
            //
            //'
            Assert.AreEqual(this.AssertConvertBase1to36ExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertConvertBaseConvertBase - Use 'AssertConvertBaseConvertBaseExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBaseConvertBase()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '12 convbase2 convbase 3 convbase2
            //1,1002
            //12 convbase2
            //1,1002
            //
            //'
            Assert.AreEqual(this.AssertConvertBaseConvertBaseExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertConvertBaseNegative
        /// </summary>
        public void AssertConvertBaseNegative()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'null'
            Assert.IsNull(uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertConvertToBase37 - Use 'AssertConvertToBase37ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertToBase37()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '4convbase37
            //437
            //38convbase37
            //1137
            //
            //'
            Assert.AreEqual(this.AssertConvertToBase37ExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertConvertToBaseZero - Use 'AssertConvertToBaseZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertToBaseZero()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '
            //'
            Assert.AreEqual(this.AssertConvertToBaseZeroExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertConveryBinaryNull - Use 'AssertConveryBinaryNullExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConveryBinaryNull()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box is not equal to 'ans convbase2
            //02
            //
            //'
            Assert.AreNotEqual(this.AssertConveryBinaryNullExpectedValues.UIItemEditText, uIItemEdit.Text, "There should not be an output");
        }
        
        /// <summary>
        /// AssertCosBasic - Use 'AssertCosBasicExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCosBasic()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'cos 57
            //0.54463903501502
            //
            //'
            Assert.AreEqual(this.AssertCosBasicExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertDivision - Use 'AssertDivisionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDivision()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '77/11
            //7
            //
            //'
            Assert.AreEqual(this.AssertDivisionExpectedValues.UIItemEditText, uIItemEdit.Text, "Output is wrong");
        }
        
        /// <summary>
        /// AssertEmptyEntry - Use 'AssertEmptyEntryExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEmptyEntry()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1+2
            //3
            //
            //'
            Assert.AreEqual(this.AssertEmptyEntryExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertMultiplication - Use 'AssertMultiplicationExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMultiplication()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '99999*99999
            //9,999,800,001
            //
            //'
            Assert.AreEqual(this.AssertMultiplicationExpectedValues.UIItemEditText, uIItemEdit.Text, "Output is Wrong");
        }
        
        /// <summary>
        /// AssertNonFunction - Use 'AssertNonFunctionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNonFunction()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '9999999999
            //9,999,999,999
            //99999999999999999999999
            //1.000000e+023
            //
            //'
            Assert.AreEqual(this.AssertNonFunctionExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertNonFunctionZero - Use 'AssertNonFunctionZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNonFunctionZero()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '0
            //0
            //
            //'
            Assert.AreEqual(this.AssertNonFunctionZeroExpectedValues.UIItemEditText, uIItemEdit.Text, "Output is Wrong");
        }
        
        /// <summary>
        /// AssertNumberedButtons - Use 'AssertNumberedButtonsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNumberedButtons()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1234567890
            //1,234,567,890
            //
            //'
            Assert.AreEqual(this.AssertNumberedButtonsExpectedValues.UIItemEditText, uIItemEdit.Text, "Wrong Output");
        }
        
        /// <summary>
        /// AssertOneToBinary - Use 'AssertOneToBinaryExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOneToBinary()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '1 convbase 2
            //12
            //
            //'
            Assert.AreEqual(this.AssertOneToBinaryExpectedValues.UIItemEditText, uIItemEdit.Text, "Output was not correct");
        }
        
        /// <summary>
        /// AssertPowers - Use 'AssertPowersExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertPowers()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '9^9
            //387,420,489
            //
            //'
            Assert.AreEqual(this.AssertPowersExpectedValues.UIItemEditText, uIItemEdit.Text, "Output is Wrong");
        }
        
        /// <summary>
        /// AssertSinBasic - Use 'AssertSinBasicExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSinBasic()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'sin 57
            //0.83867056794542
            //
            //'
            Assert.AreEqual(this.AssertSinBasicExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertSquareRoot - Use 'AssertSquareRootExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSquareRoot()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'sqrt 2
            //1.4142135623731
            //sqrt 3
            //1.73205080756888
            //sqrt 4
            //2
            //sqrt 5
            //2.23606797749979
            //sqrt 6
            //2.44948974278318
            //sqrt 7
            //2.6457513110646
            //sqrt 8
            //2.8284271247462
            //sqrt 9
            //3
            //
            //'
            Assert.AreEqual(this.AssertSquareRootExpectedValues.UIItemEditText, uIItemEdit.Text, "Wrong Output");
        }
        
        /// <summary>
        /// AssertSubtraction - Use 'AssertSubtractionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSubtraction()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '20-30
            //-10
            //
            //'
            Assert.AreEqual(this.AssertSubtractionExpectedValues.UIItemEditText, uIItemEdit.Text, "Output is Wrong");
        }
        
        /// <summary>
        /// AssertTanBasic - Use 'AssertTanBasicExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTanBasic()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'tan 57
            //1.53986496381459
            //
            //'
            Assert.AreEqual(this.AssertTanBasicExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertZeroToBinary - Use 'AssertZeroToBinaryExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertZeroToBinary()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '0 convbase2
            //02
            //
            //'
            Assert.AreEqual(this.AssertZeroToBinaryExpectedValues.UIItemEditText, uIItemEdit.Text, "Wrong Output");
        }
        
        /// <summary>
        /// ClearOutput
        /// </summary>
        public void ClearOutput()
        {
            #region Variable Declarations
            WinMenuItem uIOutputMenuItem = this.UIGraphCalcWindow.UIApplicationMenuBar.UIEditMenuItem.UIClearMenuItem.UIOutputMenuItem;
            #endregion

            // Click 'Edit' -> 'Clear' -> 'Output' menu item
            Mouse.Click(uIOutputMenuItem, new Point(51, 16));
        }
        
        /// <summary>
        /// ConvertBase100000 - Use 'ConvertBase100000Params' to pass parameters into this method.
        /// </summary>
        public void ConvertBase100000()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '4convbase100000' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase100000Params.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase100000Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ConvertBase1to36 - Use 'ConvertBase1to36Params' to pass parameters into this method.
        /// </summary>
        public void ConvertBase1to36()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '0 convbase1' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys, ModifierKeys.None);

            // Select '0convbase2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Select '0convbase3' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys2, ModifierKeys.None);

            // Select '0convbase4' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem3;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys3, ModifierKeys.None);

            // Select '0convbase5' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem4;

            // Type 'Control + a' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys4, ModifierKeys.Control);

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys5, ModifierKeys.None);

            // Select '0convbase6' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem5;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys6, ModifierKeys.None);

            // Select '0convbase7' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem6;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys7, ModifierKeys.None);

            // Select '0convbase8' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem7;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys8, ModifierKeys.None);

            // Select '0convbase9' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem8;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys9, ModifierKeys.None);

            // Select '0convbase10' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem9;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys10, ModifierKeys.None);

            // Select '0convbase11' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem10;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys11, ModifierKeys.None);

            // Select '0convbase12' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem11;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys12, ModifierKeys.None);

            // Select '0convbase13' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem12;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys13, ModifierKeys.None);

            // Select '0convbase14' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem13;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys14, ModifierKeys.None);

            // Select '0convbase14' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem14;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys15, ModifierKeys.None);

            // Select '0convbase15' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem15;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys16, ModifierKeys.None);

            // Select '0convbase16' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem16;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys17, ModifierKeys.None);

            // Select '0convbase17' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem17;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys18, ModifierKeys.None);

            // Select '0convbase18' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem18;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys19, ModifierKeys.None);

            // Select '0convbase19' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem19;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys20, ModifierKeys.None);

            // Select '0convbase20' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem20;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys21, ModifierKeys.None);

            // Select '0convbase21' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem21;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys22, ModifierKeys.None);

            // Select '0convbase22' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem22;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys23, ModifierKeys.None);

            // Select '0convbase23' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem23;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys24, ModifierKeys.None);

            // Select '0convbase24' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem24;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys25, ModifierKeys.None);

            // Select '0convbase25' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem25;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys26, ModifierKeys.None);

            // Select '0convbase26' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem26;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys27, ModifierKeys.None);

            // Select '0convbase27' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem27;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys28, ModifierKeys.None);

            // Select '0convbase28' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem28;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys29, ModifierKeys.None);

            // Select '0convbase29' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem29;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys30, ModifierKeys.None);

            // Select '0convbase30' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem30;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys31, ModifierKeys.None);

            // Select '0convbase31' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem31;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys32, ModifierKeys.None);

            // Select '0convbase32' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem32;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys33, ModifierKeys.None);

            // Select '0convbase33' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem33;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys34, ModifierKeys.None);

            // Select '0convbase34' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem34;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys35, ModifierKeys.None);

            // Select '0convbase35' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem35;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys36, ModifierKeys.None);

            // Select '0convbase36' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1to36Params.UIItemComboBoxEditableItem36;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1to36Params.UIItemEditSendKeys37, ModifierKeys.None);
        }
        
        /// <summary>
        /// Entry is Null on start up of calculator
        /// </summary>
        public void ConvertBaseBinaryNull()
        {
            #region Variable Declarations
            WinMenuItem uIBinaryMenuItem = this.UIGraphCalcWindow.UIApplicationMenuBar.UIInsertMenuItem.UIConvertToBaseMenuItem.UIBinaryMenuItem;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Click 'Insert' -> 'Convert To Base' -> 'Binary' menu item
            Mouse.Click(uIBinaryMenuItem, new Point(99, 11));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(596, 390));
        }
        
        /// <summary>
        /// Tests using more than one convert to base function with different bases
        /// </summary>
        public void ConvertBaseConvertBase()
        {
            #region Variable Declarations
            WinMenuItem uIBinaryMenuItem = this.UIGraphCalcWindow.UIApplicationMenuBar.UIInsertMenuItem.UIConvertToBaseMenuItem.UIBinaryMenuItem;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinMenuItem uIInsertMenuItem = this.UIGraphCalcWindow.UIApplicationMenuBar.UIInsertMenuItem;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            WinMenu uIInsertMenu = this.UIGraphCalcWindow.UIInsertMenu;
            #endregion

            // Click 'Insert' -> 'Convert To Base' -> 'Binary' menu item
            Mouse.Click(uIBinaryMenuItem, new Point(69, 13));

            // Select '12 convbase2 ' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseConvertBaseParams.UIItemComboBoxEditableItem;

            // Click 'Insert' menu item
            Mouse.Click(uIInsertMenuItem, new Point(31, 2));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(487, 189));

            // Click text box
            Mouse.Click(uIItemEdit, new Point(101, 7));

            // Click 'Insert' menu item
            Mouse.Click(uIInsertMenuItem, new Point(24, 16));

            // Type '{Right}' in 'Insert' popup menu
            Keyboard.SendKeys(uIInsertMenu, this.ConvertBaseConvertBaseParams.UIInsertMenuSendKeys, ModifierKeys.None);

            // Select '12 convbase2 convbase 3 convbase2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseConvertBaseParams.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseConvertBaseParams.UIItemEditSendKeys, ModifierKeys.None);

            // Select '12 convbase2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseConvertBaseParams.UIItemComboBoxEditableItem2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseConvertBaseParams.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Uses a negative convert to base number. convbase-1
        /// </summary>
        public void ConvertBaseNegative()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '4convbase-1' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseNegativeParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseNegativeParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ConvertToBase37 - Use 'ConvertToBase37Params' to pass parameters into this method.
        /// </summary>
        public void ConvertToBase37()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '4convbase37' in combo box
            uIItemComboBox.EditableItem = this.ConvertToBase37Params.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertToBase37Params.UIItemEditSendKeys, ModifierKeys.None);

            // Select '38convbase37' in combo box
            uIItemComboBox.EditableItem = this.ConvertToBase37Params.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertToBase37Params.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Try to convert with a base 0
        /// </summary>
        public void ConvertToBaseZero()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            WinButton uICloseprogramButton = this.UIGrphCalcWindow.UIGrphCalcPane.UICloseprogramButton;
            #endregion

            // Select '4convbase0' in combo box
            uIItemComboBox.EditableItem = this.ConvertToBaseZeroParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertToBaseZeroParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click '&Close program' button
            Mouse.Click(uICloseprogramButton, new Point(33, 10));
        }
        
        /// <summary>
        /// CosBasic - Use 'CosBasicParams' to pass parameters into this method.
        /// </summary>
        public void CosBasic()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Select '' in combo box
            uIItemComboBox.EditableItem = this.CosBasicParams.UIItemComboBoxEditableItem;

            // Type '{Back}' in text box
            Keyboard.SendKeys(uIItemEdit, this.CosBasicParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(491, 255));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(500, 335));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(440, 305));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(600, 389));
        }
        
        /// <summary>
        /// Division - Use 'DivisionParams' to pass parameters into this method.
        /// </summary>
        public void Division()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '77/11' in combo box
            uIItemComboBox.EditableItem = this.DivisionParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.DivisionParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EmptyEntryBox
        /// </summary>
        public void EmptyEntryBox()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinButton uIOKButton = this.UIEquationErrorWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UIEquationErrorWindow.UIEquationErrorTitleBar.UICloseButton;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(595, 395));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(74, 5));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(452, 360));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(609, 362));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(512, 362));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(605, 401));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(605, 400));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 9));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(587, 387));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(87, 8));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(597, 393));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(73, 9));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(586, 392));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(78, 10));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(589, 394));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(56, 13));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(588, 389));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 16));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(596, 390));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 4));
        }
        
        /// <summary>
        /// Multiplication - Use 'MultiplicationParams' to pass parameters into this method.
        /// </summary>
        public void Multiplication()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Select '99999*99999' in combo box
            uIItemComboBox.EditableItem = this.MultiplicationParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(587, 394));
        }
        
        /// <summary>
        /// NonFunction - Use 'NonFunctionParams' to pass parameters into this method.
        /// </summary>
        public void NonFunction()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '9999999999' in combo box
            uIItemComboBox.EditableItem = this.NonFunctionParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.NonFunctionParams.UIItemEditSendKeys, ModifierKeys.None);

            // Select '99999999999999999999999' in combo box
            uIItemComboBox.EditableItem = this.NonFunctionParams.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.NonFunctionParams.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Enters 0 with no function
        /// </summary>
        public void NonFunctionZero()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(450, 387));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(592, 396));
        }
        
        /// <summary>
        /// NumberButtons
        /// </summary>
        public void NumberButtons()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(451, 355));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(494, 364));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(549, 364));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(456, 343));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(503, 338));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(542, 338));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(440, 311));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(502, 309));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(543, 309));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(449, 386));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 390));
        }
        
        /// <summary>
        /// OneToBinary
        /// </summary>
        public void OneToBinary()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinMenuItem uIOptionsMenuItem = this.UIGraphCalcWindow.UIApplicationMenuBar.UIOptionsMenuItem;
            WinMenuItem uIBinaryMenuItem = this.UIGraphCalcWindow.UIApplicationMenuBar.UIInsertMenuItem.UIConvertToBaseMenuItem.UIBinaryMenuItem;
            #endregion

            // Click text box
            Mouse.Click(uIItemEdit, new Point(14, 8));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(444, 369));

            // Click 'Options' menu item
            Mouse.Click(uIOptionsMenuItem, new Point(13, 8));

            // Click 'Insert' -> 'Convert To Base' -> 'Binary' menu item
            Mouse.Click(uIBinaryMenuItem, new Point(63, 13));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(581, 386));
        }
        
        /// <summary>
        /// Power - Use 'PowerParams' to pass parameters into this method.
        /// </summary>
        public void Power()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '9^9' in combo box
            uIItemComboBox.EditableItem = this.PowerParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.PowerParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// SinBasic
        /// </summary>
        public void SinBasic()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(445, 255));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(495, 344));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(455, 309));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(587, 393));
        }
        
        /// <summary>
        /// SquareRoot - Use 'SquareRootParams' to pass parameters into this method.
        /// </summary>
        public void SquareRoot()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click text box
            Mouse.Click(uIItemEdit, new Point(69, 8));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(398, 338));

            // Select 'sqrt 2' in combo box
            uIItemComboBox.EditableItem = this.SquareRootParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(579, 396));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(414, 336));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(540, 370));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(589, 395));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(405, 340));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(446, 336));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(604, 389));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(399, 333));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(506, 330));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(607, 396));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(408, 333));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(555, 335));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 390));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(398, 339));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(445, 311));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(580, 397));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(409, 331));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(504, 309));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(595, 398));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(404, 337));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(547, 309));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(598, 388));
        }
        
        /// <summary>
        /// Subtraction - Use 'SubtractionParams' to pass parameters into this method.
        /// </summary>
        public void Subtraction()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '20-30' in combo box
            uIItemComboBox.EditableItem = this.SubtractionParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SubtractionParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// TanBasic
        /// </summary>
        public void TanBasic()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(557, 256));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(492, 340));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(445, 312));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(596, 392));
        }
        
        /// <summary>
        /// ZeroConvertToBinary - Use 'ZeroConvertToBinaryParams' to pass parameters into this method.
        /// </summary>
        public void ZeroConvertToBinary()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinMenuItem uIBinaryMenuItem = this.UIGraphCalcWindow.UIApplicationMenuBar.UIInsertMenuItem.UIConvertToBaseMenuItem.UIBinaryMenuItem;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Select '0' in combo box
            uIItemComboBox.EditableItem = this.ZeroConvertToBinaryParams.UIItemComboBoxEditableItem;

            // Click 'Insert' -> 'Convert To Base' -> 'Binary' menu item
            Mouse.Click(uIBinaryMenuItem, new Point(47, 17));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(601, 396));
        }
        
        /// <summary>
        /// ConvertBase1 - Use 'ConvertBase1Params' to pass parameters into this method.
        /// </summary>
        public void ConvertBase1()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            WinButton uICloseprogramButton = this.UIGrphCalcWindow.UIGrphCalcPane.UICloseprogramButton;
            #endregion

            // Select '4convbase1' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1Params.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click '&Close program' button
            Mouse.Click(uICloseprogramButton, new Point(74, 13));

            // Select '4convbase1' in combo box
            uIItemComboBox.EditableItem = this.ConvertBase1Params.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBase1Params.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConvertBase1
        /// </summary>
        public void AssertConvertBase1()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'null'
            Assert.IsNull(uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConvertBaseBetweenBases - Use 'ConvertBaseBetweenBasesParams' to pass parameters into this method.
        /// </summary>
        public void ConvertBaseBetweenBases()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UIRuntimeErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Select '4convbase2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseBetweenBasesParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseBetweenBasesParams.UIItemEditSendKeys, ModifierKeys.None);

            // Select 'ans convbase5' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseBetweenBasesParams.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseBetweenBasesParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Select 'ans conbase20' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseBetweenBasesParams.UIItemComboBoxEditableItem2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseBetweenBasesParams.UIItemEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 14));

            // Select 'ans convbase 20' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseBetweenBasesParams.UIItemComboBoxEditableItem3;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseBetweenBasesParams.UIItemEditSendKeys3, ModifierKeys.None);

            // Select 'ans convbase2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseBetweenBasesParams.UIItemComboBoxEditableItem4;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseBetweenBasesParams.UIItemEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConvertBaseBetweenBases - Use 'AssertConvertBaseBetweenBasesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBaseBetweenBases()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '4convbase2
            //1002
            //ans convbase5
            //45
            //ans convbase 20
            //420
            //ans convbase2
            //1002
            //
            //'
            Assert.AreEqual(this.AssertConvertBaseBetweenBasesExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// See if negative binary numbers are acceptable output
        /// </summary>
        public void ConvertBaseNegativeNumber()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '-20 convbase 2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseNegativeNumberParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseNegativeNumberParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConvertBaseNegativeNumber - Use 'AssertConvertBaseNegativeNumberExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBaseNegativeNumber()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '-20 convbase 2
            //-10,1002
            //
            //'
            Assert.AreEqual(this.AssertConvertBaseNegativeNumberExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// converts a decimal
        /// </summary>
        public void ConvertBaseNonInteger()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '3.333 convbase 2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseNonIntegerParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseNonIntegerParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConvertBaseNonInteger - Use 'AssertConvertBaseNonIntegerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBaseNonInteger()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '3.333 convbase 2
            //11.01010101001111110111110011101101100100010110100012
            //
            //'
            Assert.AreEqual(this.AssertConvertBaseNonIntegerExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConvertBaseIrrationalNumber - Use 'ConvertBaseIrrationalNumberParams' to pass parameters into this method.
        /// </summary>
        public void ConvertBaseIrrationalNumber()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(404, 332));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(501, 371));

            // Select 'sqrt 2 convbase 2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseIrrationalNumberParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseIrrationalNumberParams.UIItemEditSendKeys, ModifierKeys.None);

            // Select 'sqrt 3 convbase 2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseIrrationalNumberParams.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseIrrationalNumberParams.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConverBaseIrrationalNUmber - Use 'AssertConverBaseIrrationalNUmberExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConverBaseIrrationalNUmber()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'sqrt 2 convbase 2
            //1.011010100000100111100110011001111111001110111100112
            //sqrt 3 convbase 2
            //1.101110110110011110101110100001011000010011001010112
            //
            //'
            Assert.AreEqual(this.AssertConverBaseIrrationalNUmberExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConvertBaseIrrationalBase - Use 'ConvertBaseIrrationalBaseParams' to pass parameters into this method.
        /// </summary>
        public void ConvertBaseIrrationalBase()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '15 convbase ' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseIrrationalBaseParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(406, 345));

            // Select '15 convbase sqrt 2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseIrrationalBaseParams.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseIrrationalBaseParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Should Not Crash
        /// </summary>
        public void AssertConvertToBaseIrrationalBase()
        {
            #region Variable Declarations
            WinTitleBar uIGrphCalcTitleBar = this.UIGrphCalcWindow.UIGrphCalcTitleBar;
            #endregion

            // Verify that the 'Exists' property of 'GrphCalc' title bar is not equal to 'True'
            Assert.AreNotEqual(this.AssertConvertToBaseIrrationalBaseExpectedValues.UIGrphCalcTitleBarExists, uIGrphCalcTitleBar.Exists, "Crash");
        }
        
        /// <summary>
        /// ConvertToBaseDecimalBase - Use 'ConvertToBaseDecimalBaseParams' to pass parameters into this method.
        /// </summary>
        public void ConvertToBaseDecimalBase()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Select '15 convbase1.5' in combo box
            uIItemComboBox.EditableItem = this.ConvertToBaseDecimalBaseParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(588, 390));
        }
        
        /// <summary>
        /// AssertConvertToBaseDecimalBase - Use 'AssertConvertToBaseDecimalBaseExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertToBaseDecimalBase()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '
            //'
            Assert.AreEqual(this.AssertConvertToBaseDecimalBaseExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConvertBaseWithFunctionAsBase - Use 'ConvertBaseWithFunctionAsBaseParams' to pass parameters into this method.
        /// </summary>
        public void ConvertBaseWithFunctionAsBase()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '15 convbase(1+3-1)' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseWithFunctionAsBaseParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseWithFunctionAsBaseParams.UIItemEditSendKeys, ModifierKeys.None);

            // Select '15 convbase (1+1)' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseWithFunctionAsBaseParams.UIItemComboBoxEditableItem1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseWithFunctionAsBaseParams.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConvertBaseWithFunctionAsBase - Use 'AssertConvertBaseWithFunctionAsBaseExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBaseWithFunctionAsBase()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '15 convbase(1+3-1)
            //1203
            //15 convbase (1+1)
            //1,1112
            //
            //'
            Assert.AreEqual(this.AssertConvertBaseWithFunctionAsBaseExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConvertBaseButton - Use 'ConvertBaseButtonParams' to pass parameters into this method.
        /// </summary>
        public void ConvertBaseButton()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinMenuItem uIBinaryMenuItem = this.UIItemWindow.UIConvertToBaseMenuItem.UIBinaryMenuItem;
            WinMenuItem uIItem36MenuItem = this.UIItemWindow.UIConvertToBaseMenuItem.UIItem36MenuItem;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(460, 226));

            // Select '15 ' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseButtonParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(462, 232));

            // Click 'Convert To Base ->' -> 'Binary' menu item
            Mouse.Click(uIBinaryMenuItem, new Point(62, 21));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(584, 392));

            // Select '12345678' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseButtonParams.UIItemComboBoxEditableItem1;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(450, 234));

            // Click 'Convert To Base ->' -> '36' menu item
            Mouse.Click(uIItem36MenuItem, new Point(39, 5));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(590, 392));
        }
        
        /// <summary>
        /// AssertConvertBaseButton - Use 'AssertConvertBaseButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBaseButton()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '15  convbase 2
            //1,1112
            //12345678 convbase 36
            //7C,LZI36
            //
            //'
            Assert.AreEqual(this.AssertConvertBaseButtonExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConvertBaseEmptyInput
        /// </summary>
        public void ConvertBaseEmptyInput()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinMenuItem uIBinaryMenuItem = this.UIItemWindow.UIConvertToBaseMenuItem.UIBinaryMenuItem;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(459, 233));

            // Click 'Convert To Base ->' -> 'Binary' menu item
            Mouse.Click(uIBinaryMenuItem, new Point(51, 10));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(600, 382));
        }
        
        /// <summary>
        /// AssertConvertBaseButtonEmptyInput - Use 'AssertConvertBaseButtonEmptyInputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConvertBaseButtonEmptyInput()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals ''
            Assert.AreEqual(this.AssertConvertBaseButtonEmptyInputExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConvertBaseFunctionAsNumber - Use 'ConvertBaseFunctionAsNumberParams' to pass parameters into this method.
        /// </summary>
        public void ConvertBaseFunctionAsNumber()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Select '(20*100*0+15)convbase2' in combo box
            uIItemComboBox.EditableItem = this.ConvertBaseFunctionAsNumberParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConvertBaseFunctionAsNumberParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConverBaseFunctionAsNumber - Use 'AssertConverBaseFunctionAsNumberExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConverBaseFunctionAsNumber()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(20*100*0+15)convbase2
            //1,1112
            //
            //'
            Assert.AreEqual(this.AssertConverBaseFunctionAsNumberExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConstPi - Use 'ConstPiParams' to pass parameters into this method.
        /// </summary>
        public void ConstPi()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinMenuItem uIPIMenuItem = this.UIItemWindow.UIMathMenuItem.UIPIMenuItem;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(510, 231));

            // Click 'Math' -> 'pi' menu item
            Mouse.Click(uIPIMenuItem, new Point(52, 7));

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ConstPiParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertConstPi - Use 'AssertConstPiExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConstPi()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(Math|pi)
            //3.1415926535898
            //
            //'
            Assert.AreEqual(this.AssertConstPiExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// SpeedOfLight
        /// </summary>
        public void SpeedOfLight()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinMenuItem uICmsMenuItem = this.UIItemWindow.UIPhysicsMenuItem.UICmsMenuItem;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(505, 220));

            // Click 'Physics' -> 'c (m/s)' menu item
            Mouse.Click(uICmsMenuItem, new Point(147, 14));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(599, 394));
        }
        
        /// <summary>
        /// AssertSpeedOfLight - Use 'AssertSpeedOfLightExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSpeedOfLight()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(Physics|c (m/s))
            //299,792,458
            //
            //'
            Assert.AreEqual(this.AssertSpeedOfLightExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConstEarthGravity
        /// </summary>
        public void ConstEarthGravity()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinMenuItem uIGMenuItem = this.UIItemWindow.UIPhysicsMenuItem.UIGMenuItem;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(510, 231));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(510, 231));

            // Click 'Physics' -> 'g' menu item
            Mouse.Click(uIGMenuItem, new Point(166, 9));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(590, 397));
        }
        
        /// <summary>
        /// AssertConstEarthGravity - Use 'AssertConstEarthGravityExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertConstEarthGravity()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(Physics|g)
            //9.80665
            //
            //'
            Assert.AreEqual(this.AssertConstEarthGravityExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// ConstBoltzman
        /// </summary>
        public void ConstBoltzman()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinMenuItem uIBoltzmansconstantJKMenuItem = this.UIItemWindow.UIPhysicsMenuItem.UIBoltzmansconstantJKMenuItem;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(502, 233));

            // Click 'Physics' -> 'Boltzman's constant (J/K)' menu item
            Mouse.Click(uIBoltzmansconstantJKMenuItem, new Point(150, 15));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(595, 392));
        }
        
        /// <summary>
        /// AssertBoltzmansConst - Use 'AssertBoltzmansConstExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertBoltzmansConst()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(Physics|Boltzman's constant (J/K))
            //1.380658e-023
            //
            //'
            Assert.AreEqual(this.AssertBoltzmansConstExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// GasConst
        /// </summary>
        public void GasConst()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinMenuItem uIGasconstantMenuItem = this.UIItemWindow.UIPhysicsMenuItem.UIGasconstantMenuItem;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(509, 226));

            // Click 'Physics' -> 'gas constant' menu item
            Mouse.Click(uIGasconstantMenuItem, new Point(101, 7));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(601, 393));
        }
        
        /// <summary>
        /// AssertGasConst - Use 'AssertGasConstExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertGasConst()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '(Physics|gas constant)
            //8.31451
            //
            //'
            Assert.AreEqual(this.AssertGasConstExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// Fibonacci_Zero_Input - Use 'Fibonacci_Zero_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_Zero_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(501, 118));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(452, 385));

            // Select '' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_Zero_InputParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(486, 129));

            // Select 'fib(0)' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_Zero_InputParams.UIItemComboBoxEditableItem1;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(605, 393));
        }
        
        /// <summary>
        /// Assert_Fibonacci_Zero_Input - Use 'Assert_Fibonacci_Zero_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Fibonacci_Zero_Input()
        {
            #region Variable Declarations
            WinTitleBar uIRuntimeErrorTitleBar = this.UIRuntimeErrorWindow.UIRuntimeErrorTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Runtime Error' title bar equals 'Runtime Error'
            Assert.AreEqual(this.Assert_Fibonacci_Zero_InputExpectedValues.UIRuntimeErrorTitleBarDisplayText, uIRuntimeErrorTitleBar.DisplayText);
        }
        
        /// <summary>
        /// Fibonacci_Negative_Input - Use 'Fibonacci_Negative_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_Negative_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(501, 116));

            // Select 'fib(-1)' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_Negative_InputParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(595, 393));
        }
        
        /// <summary>
        /// Assert_Fibonacci_Negative_Input - Use 'Assert_Fibonacci_Negative_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Fibonacci_Negative_Input()
        {
            #region Variable Declarations
            WinTitleBar uIRuntimeErrorTitleBar = this.UIRuntimeErrorWindow.UIRuntimeErrorTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Runtime Error' title bar equals 'Runtime Error'
            Assert.AreEqual(this.Assert_Fibonacci_Negative_InputExpectedValues.UIRuntimeErrorTitleBarDisplayText, uIRuntimeErrorTitleBar.DisplayText);
        }
        
        /// <summary>
        /// Fibonacci_Large_Input - Use 'Fibonacci_Large_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_Large_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(491, 120));

            // Select 'fib(999999999999999999999999999999)' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_Large_InputParams.UIItemComboBoxEditableItem;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Fibonacci_Large_InputParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Assert_Fibonacci_Large_Input - Use 'Assert_Fibonacci_Large_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Fibonacci_Large_Input()
        {
            #region Variable Declarations
            WinText uIERRORYoumustenterapoText = this.UIRuntimeErrorWindow.UIERRORYoumustenterapoWindow.UIERRORYoumustenterapoText;
            #endregion

            // Verify that the 'DisplayText' property of 'ERROR: You must enter a positive integer for a fib...' label is not equal to 'ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)
            //EQUATION ENTERED: fib(999999999999999999999999999999)'
            Assert.AreNotEqual(this.Assert_Fibonacci_Large_InputExpectedValues.UIERRORYoumustenterapoTextDisplayText, uIERRORYoumustenterapoText.DisplayText);
        }
        
        /// <summary>
        /// Fibonacci_Fibonacci_Input - Use 'Fibonacci_Fibonacci_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_Fibonacci_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(493, 123));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(493, 123));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(493, 123));

            // Select 'fib(fib(6))' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_Fibonacci_InputParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(587, 385));
        }
        
        /// <summary>
        /// Asser_Fibonacci_Fibonacci_Input - Use 'Asser_Fibonacci_Fibonacci_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Asser_Fibonacci_Fibonacci_Input()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'fib(fib(6))
            //21
            //
            //'
            Assert.AreEqual(this.Asser_Fibonacci_Fibonacci_InputExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// Fibonacci_Decimal_Input - Use 'Fibonacci_Decimal_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_Decimal_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(503, 125));

            // Select 'fib(3.5)' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_Decimal_InputParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(600, 393));
        }
        
        /// <summary>
        /// Assert_Fibonacci_Decimal_Input - Use 'Assert_Fibonacci_Decimal_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Fibonacci_Decimal_Input()
        {
            #region Variable Declarations
            WinText uIERRORYoumustenterapoText1 = this.UIRuntimeErrorWindow.UIERRORYoumustenterapoWindow.UIERRORYoumustenterapoText1;
            #endregion

            // Verify that the 'DisplayText' property of 'ERROR: You must enter a positive integer for a fib...' label equals 'ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)
            //EQUATION ENTERED: fib(3.5)'
            Assert.AreEqual(this.Assert_Fibonacci_Decimal_InputExpectedValues.UIERRORYoumustenterapoText1DisplayText, uIERRORYoumustenterapoText1.DisplayText);
        }
        
        /// <summary>
        /// Fibonacci_Irrational_Input
        /// </summary>
        public void Fibonacci_Irrational_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(499, 117));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(398, 336));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(492, 358));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(583, 390));
        }
        
        /// <summary>
        /// Asser_Fibonacci_Irrational_Input - Use 'Asser_Fibonacci_Irrational_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Asser_Fibonacci_Irrational_Input()
        {
            #region Variable Declarations
            WinText uIERRORYoumustenterapoText2 = this.UIRuntimeErrorWindow.UIERRORYoumustenterapoWindow.UIERRORYoumustenterapoText2;
            #endregion

            // Verify that the 'DisplayText' property of 'ERROR: You must enter a positive integer for a fib...' label equals 'ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)
            //EQUATION ENTERED: fib(sqrt 2)'
            Assert.AreEqual(this.Asser_Fibonacci_Irrational_InputExpectedValues.UIERRORYoumustenterapoText2DisplayText, uIERRORYoumustenterapoText2.DisplayText);
        }
        
        /// <summary>
        /// Fibonacci_Function_Input
        /// </summary>
        public void Fibonacci_Function_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(495, 123));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(444, 308));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(606, 308));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(500, 309));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(592, 340));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(544, 340));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(583, 360));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(460, 359));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(592, 395));
        }
        
        /// <summary>
        /// Assert_Fibonacci_Function_Input - Use 'Assert_Fibonacci_Function_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Fibonacci_Function_Input()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box is not equal to 'fib(7*8-6+1)
            //-1,109,825,406
            //
            //'
            Assert.AreNotEqual(this.Assert_Fibonacci_Function_InputExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// Fibonacci_ans_Input - Use 'Fibonacci_ans_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_ans_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(554, 338));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(592, 388));

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(491, 120));

            // Select 'fib(ans)' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_ans_InputParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(599, 394));
        }
        
        /// <summary>
        /// Asser_Fibonacci_ans_Input - Use 'Asser_Fibonacci_ans_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Asser_Fibonacci_ans_Input()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIGraphCalcWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '6
            //6
            //fib(ans)
            //8
            //
            //'
            Assert.AreEqual(this.Asser_Fibonacci_ans_InputExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// Fibonacci_UndefinedVariable_Input - Use 'Fibonacci_UndefinedVariable_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_UndefinedVariable_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(493, 119));

            // Select 'fib(j)' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_UndefinedVariable_InputParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(591, 390));
        }
        
        /// <summary>
        /// Asser_Fibonacci_UndefinedVariable_Input - Use 'Asser_Fibonacci_UndefinedVariable_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Asser_Fibonacci_UndefinedVariable_Input()
        {
            #region Variable Declarations
            WinText uIERRORUndefinedconstaText = this.UIRuntimeErrorWindow.UIERRORYoumustenterapoWindow.UIERRORUndefinedconstaText;
            #endregion

            // Verify that the 'DisplayText' property of 'ERROR: Undefined constant EQUATION ENTERED: fib(j)' label equals 'ERROR: Undefined constant
            //EQUATION ENTERED: fib(j)'
            Assert.AreEqual(this.Asser_Fibonacci_UndefinedVariable_InputExpectedValues.UIERRORUndefinedconstaTextDisplayText, uIERRORUndefinedconstaText.DisplayText);
        }
        
        /// <summary>
        /// Fibonacci_NULL_Input - Use 'Fibonacci_NULL_InputParams' to pass parameters into this method.
        /// </summary>
        public void Fibonacci_NULL_Input()
        {
            #region Variable Declarations
            WinControl uIGraphCalcDialog = this.UIGraphCalcWindow.UIGraphCalcDialog;
            WinComboBox uIItemComboBox = this.UIGraphCalcWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(496, 120));

            // Select 'fib()' in combo box
            uIItemComboBox.EditableItem = this.Fibonacci_NULL_InputParams.UIItemComboBoxEditableItem;

            // Click 'GraphCalc' Dialog
            Mouse.Click(uIGraphCalcDialog, new Point(593, 398));
        }
        
        /// <summary>
        /// Asser_Fibonacci_NULL_Input - Use 'Asser_Fibonacci_NULL_InputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Asser_Fibonacci_NULL_Input()
        {
            #region Variable Declarations
            WinText uIERROREmptysetofparenText = this.UIEquationErrorWindow.UIERROREmptysetofparenWindow.UIERROREmptysetofparenText;
            #endregion

            // Verify that the 'DisplayText' property of 'ERROR: Empty set of parenthesis EQUATION ENTERED: ...' label equals 'ERROR: Empty set of parenthesis
            //EQUATION ENTERED: fib()'
            Assert.AreEqual(this.Asser_Fibonacci_NULL_InputExpectedValues.UIERROREmptysetofparenTextDisplayText, uIERROREmptysetofparenText.DisplayText);
        }
        
        #region Properties
        public virtual AdditionParams AdditionParams
        {
            get
            {
                if ((this.mAdditionParams == null))
                {
                    this.mAdditionParams = new AdditionParams();
                }
                return this.mAdditionParams;
            }
        }
        
        public virtual AssertAdditionExpectedValues AssertAdditionExpectedValues
        {
            get
            {
                if ((this.mAssertAdditionExpectedValues == null))
                {
                    this.mAssertAdditionExpectedValues = new AssertAdditionExpectedValues();
                }
                return this.mAssertAdditionExpectedValues;
            }
        }
        
        public virtual AssertConvertBase1to36ExpectedValues AssertConvertBase1to36ExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBase1to36ExpectedValues == null))
                {
                    this.mAssertConvertBase1to36ExpectedValues = new AssertConvertBase1to36ExpectedValues();
                }
                return this.mAssertConvertBase1to36ExpectedValues;
            }
        }
        
        public virtual AssertConvertBaseConvertBaseExpectedValues AssertConvertBaseConvertBaseExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBaseConvertBaseExpectedValues == null))
                {
                    this.mAssertConvertBaseConvertBaseExpectedValues = new AssertConvertBaseConvertBaseExpectedValues();
                }
                return this.mAssertConvertBaseConvertBaseExpectedValues;
            }
        }
        
        public virtual AssertConvertToBase37ExpectedValues AssertConvertToBase37ExpectedValues
        {
            get
            {
                if ((this.mAssertConvertToBase37ExpectedValues == null))
                {
                    this.mAssertConvertToBase37ExpectedValues = new AssertConvertToBase37ExpectedValues();
                }
                return this.mAssertConvertToBase37ExpectedValues;
            }
        }
        
        public virtual AssertConvertToBaseZeroExpectedValues AssertConvertToBaseZeroExpectedValues
        {
            get
            {
                if ((this.mAssertConvertToBaseZeroExpectedValues == null))
                {
                    this.mAssertConvertToBaseZeroExpectedValues = new AssertConvertToBaseZeroExpectedValues();
                }
                return this.mAssertConvertToBaseZeroExpectedValues;
            }
        }
        
        public virtual AssertConveryBinaryNullExpectedValues AssertConveryBinaryNullExpectedValues
        {
            get
            {
                if ((this.mAssertConveryBinaryNullExpectedValues == null))
                {
                    this.mAssertConveryBinaryNullExpectedValues = new AssertConveryBinaryNullExpectedValues();
                }
                return this.mAssertConveryBinaryNullExpectedValues;
            }
        }
        
        public virtual AssertCosBasicExpectedValues AssertCosBasicExpectedValues
        {
            get
            {
                if ((this.mAssertCosBasicExpectedValues == null))
                {
                    this.mAssertCosBasicExpectedValues = new AssertCosBasicExpectedValues();
                }
                return this.mAssertCosBasicExpectedValues;
            }
        }
        
        public virtual AssertDivisionExpectedValues AssertDivisionExpectedValues
        {
            get
            {
                if ((this.mAssertDivisionExpectedValues == null))
                {
                    this.mAssertDivisionExpectedValues = new AssertDivisionExpectedValues();
                }
                return this.mAssertDivisionExpectedValues;
            }
        }
        
        public virtual AssertEmptyEntryExpectedValues AssertEmptyEntryExpectedValues
        {
            get
            {
                if ((this.mAssertEmptyEntryExpectedValues == null))
                {
                    this.mAssertEmptyEntryExpectedValues = new AssertEmptyEntryExpectedValues();
                }
                return this.mAssertEmptyEntryExpectedValues;
            }
        }
        
        public virtual AssertMultiplicationExpectedValues AssertMultiplicationExpectedValues
        {
            get
            {
                if ((this.mAssertMultiplicationExpectedValues == null))
                {
                    this.mAssertMultiplicationExpectedValues = new AssertMultiplicationExpectedValues();
                }
                return this.mAssertMultiplicationExpectedValues;
            }
        }
        
        public virtual AssertNonFunctionExpectedValues AssertNonFunctionExpectedValues
        {
            get
            {
                if ((this.mAssertNonFunctionExpectedValues == null))
                {
                    this.mAssertNonFunctionExpectedValues = new AssertNonFunctionExpectedValues();
                }
                return this.mAssertNonFunctionExpectedValues;
            }
        }
        
        public virtual AssertNonFunctionZeroExpectedValues AssertNonFunctionZeroExpectedValues
        {
            get
            {
                if ((this.mAssertNonFunctionZeroExpectedValues == null))
                {
                    this.mAssertNonFunctionZeroExpectedValues = new AssertNonFunctionZeroExpectedValues();
                }
                return this.mAssertNonFunctionZeroExpectedValues;
            }
        }
        
        public virtual AssertNumberedButtonsExpectedValues AssertNumberedButtonsExpectedValues
        {
            get
            {
                if ((this.mAssertNumberedButtonsExpectedValues == null))
                {
                    this.mAssertNumberedButtonsExpectedValues = new AssertNumberedButtonsExpectedValues();
                }
                return this.mAssertNumberedButtonsExpectedValues;
            }
        }
        
        public virtual AssertOneToBinaryExpectedValues AssertOneToBinaryExpectedValues
        {
            get
            {
                if ((this.mAssertOneToBinaryExpectedValues == null))
                {
                    this.mAssertOneToBinaryExpectedValues = new AssertOneToBinaryExpectedValues();
                }
                return this.mAssertOneToBinaryExpectedValues;
            }
        }
        
        public virtual AssertPowersExpectedValues AssertPowersExpectedValues
        {
            get
            {
                if ((this.mAssertPowersExpectedValues == null))
                {
                    this.mAssertPowersExpectedValues = new AssertPowersExpectedValues();
                }
                return this.mAssertPowersExpectedValues;
            }
        }
        
        public virtual AssertSinBasicExpectedValues AssertSinBasicExpectedValues
        {
            get
            {
                if ((this.mAssertSinBasicExpectedValues == null))
                {
                    this.mAssertSinBasicExpectedValues = new AssertSinBasicExpectedValues();
                }
                return this.mAssertSinBasicExpectedValues;
            }
        }
        
        public virtual AssertSquareRootExpectedValues AssertSquareRootExpectedValues
        {
            get
            {
                if ((this.mAssertSquareRootExpectedValues == null))
                {
                    this.mAssertSquareRootExpectedValues = new AssertSquareRootExpectedValues();
                }
                return this.mAssertSquareRootExpectedValues;
            }
        }
        
        public virtual AssertSubtractionExpectedValues AssertSubtractionExpectedValues
        {
            get
            {
                if ((this.mAssertSubtractionExpectedValues == null))
                {
                    this.mAssertSubtractionExpectedValues = new AssertSubtractionExpectedValues();
                }
                return this.mAssertSubtractionExpectedValues;
            }
        }
        
        public virtual AssertTanBasicExpectedValues AssertTanBasicExpectedValues
        {
            get
            {
                if ((this.mAssertTanBasicExpectedValues == null))
                {
                    this.mAssertTanBasicExpectedValues = new AssertTanBasicExpectedValues();
                }
                return this.mAssertTanBasicExpectedValues;
            }
        }
        
        public virtual AssertZeroToBinaryExpectedValues AssertZeroToBinaryExpectedValues
        {
            get
            {
                if ((this.mAssertZeroToBinaryExpectedValues == null))
                {
                    this.mAssertZeroToBinaryExpectedValues = new AssertZeroToBinaryExpectedValues();
                }
                return this.mAssertZeroToBinaryExpectedValues;
            }
        }
        
        public virtual ConvertBase100000Params ConvertBase100000Params
        {
            get
            {
                if ((this.mConvertBase100000Params == null))
                {
                    this.mConvertBase100000Params = new ConvertBase100000Params();
                }
                return this.mConvertBase100000Params;
            }
        }
        
        public virtual ConvertBase1to36Params ConvertBase1to36Params
        {
            get
            {
                if ((this.mConvertBase1to36Params == null))
                {
                    this.mConvertBase1to36Params = new ConvertBase1to36Params();
                }
                return this.mConvertBase1to36Params;
            }
        }
        
        public virtual ConvertBaseConvertBaseParams ConvertBaseConvertBaseParams
        {
            get
            {
                if ((this.mConvertBaseConvertBaseParams == null))
                {
                    this.mConvertBaseConvertBaseParams = new ConvertBaseConvertBaseParams();
                }
                return this.mConvertBaseConvertBaseParams;
            }
        }
        
        public virtual ConvertBaseNegativeParams ConvertBaseNegativeParams
        {
            get
            {
                if ((this.mConvertBaseNegativeParams == null))
                {
                    this.mConvertBaseNegativeParams = new ConvertBaseNegativeParams();
                }
                return this.mConvertBaseNegativeParams;
            }
        }
        
        public virtual ConvertToBase37Params ConvertToBase37Params
        {
            get
            {
                if ((this.mConvertToBase37Params == null))
                {
                    this.mConvertToBase37Params = new ConvertToBase37Params();
                }
                return this.mConvertToBase37Params;
            }
        }
        
        public virtual ConvertToBaseZeroParams ConvertToBaseZeroParams
        {
            get
            {
                if ((this.mConvertToBaseZeroParams == null))
                {
                    this.mConvertToBaseZeroParams = new ConvertToBaseZeroParams();
                }
                return this.mConvertToBaseZeroParams;
            }
        }
        
        public virtual CosBasicParams CosBasicParams
        {
            get
            {
                if ((this.mCosBasicParams == null))
                {
                    this.mCosBasicParams = new CosBasicParams();
                }
                return this.mCosBasicParams;
            }
        }
        
        public virtual DivisionParams DivisionParams
        {
            get
            {
                if ((this.mDivisionParams == null))
                {
                    this.mDivisionParams = new DivisionParams();
                }
                return this.mDivisionParams;
            }
        }
        
        public virtual MultiplicationParams MultiplicationParams
        {
            get
            {
                if ((this.mMultiplicationParams == null))
                {
                    this.mMultiplicationParams = new MultiplicationParams();
                }
                return this.mMultiplicationParams;
            }
        }
        
        public virtual NonFunctionParams NonFunctionParams
        {
            get
            {
                if ((this.mNonFunctionParams == null))
                {
                    this.mNonFunctionParams = new NonFunctionParams();
                }
                return this.mNonFunctionParams;
            }
        }
        
        public virtual PowerParams PowerParams
        {
            get
            {
                if ((this.mPowerParams == null))
                {
                    this.mPowerParams = new PowerParams();
                }
                return this.mPowerParams;
            }
        }
        
        public virtual SquareRootParams SquareRootParams
        {
            get
            {
                if ((this.mSquareRootParams == null))
                {
                    this.mSquareRootParams = new SquareRootParams();
                }
                return this.mSquareRootParams;
            }
        }
        
        public virtual SubtractionParams SubtractionParams
        {
            get
            {
                if ((this.mSubtractionParams == null))
                {
                    this.mSubtractionParams = new SubtractionParams();
                }
                return this.mSubtractionParams;
            }
        }
        
        public virtual ZeroConvertToBinaryParams ZeroConvertToBinaryParams
        {
            get
            {
                if ((this.mZeroConvertToBinaryParams == null))
                {
                    this.mZeroConvertToBinaryParams = new ZeroConvertToBinaryParams();
                }
                return this.mZeroConvertToBinaryParams;
            }
        }
        
        public virtual ConvertBase1Params ConvertBase1Params
        {
            get
            {
                if ((this.mConvertBase1Params == null))
                {
                    this.mConvertBase1Params = new ConvertBase1Params();
                }
                return this.mConvertBase1Params;
            }
        }
        
        public virtual ConvertBaseBetweenBasesParams ConvertBaseBetweenBasesParams
        {
            get
            {
                if ((this.mConvertBaseBetweenBasesParams == null))
                {
                    this.mConvertBaseBetweenBasesParams = new ConvertBaseBetweenBasesParams();
                }
                return this.mConvertBaseBetweenBasesParams;
            }
        }
        
        public virtual AssertConvertBaseBetweenBasesExpectedValues AssertConvertBaseBetweenBasesExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBaseBetweenBasesExpectedValues == null))
                {
                    this.mAssertConvertBaseBetweenBasesExpectedValues = new AssertConvertBaseBetweenBasesExpectedValues();
                }
                return this.mAssertConvertBaseBetweenBasesExpectedValues;
            }
        }
        
        public virtual ConvertBaseNegativeNumberParams ConvertBaseNegativeNumberParams
        {
            get
            {
                if ((this.mConvertBaseNegativeNumberParams == null))
                {
                    this.mConvertBaseNegativeNumberParams = new ConvertBaseNegativeNumberParams();
                }
                return this.mConvertBaseNegativeNumberParams;
            }
        }
        
        public virtual AssertConvertBaseNegativeNumberExpectedValues AssertConvertBaseNegativeNumberExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBaseNegativeNumberExpectedValues == null))
                {
                    this.mAssertConvertBaseNegativeNumberExpectedValues = new AssertConvertBaseNegativeNumberExpectedValues();
                }
                return this.mAssertConvertBaseNegativeNumberExpectedValues;
            }
        }
        
        public virtual ConvertBaseNonIntegerParams ConvertBaseNonIntegerParams
        {
            get
            {
                if ((this.mConvertBaseNonIntegerParams == null))
                {
                    this.mConvertBaseNonIntegerParams = new ConvertBaseNonIntegerParams();
                }
                return this.mConvertBaseNonIntegerParams;
            }
        }
        
        public virtual AssertConvertBaseNonIntegerExpectedValues AssertConvertBaseNonIntegerExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBaseNonIntegerExpectedValues == null))
                {
                    this.mAssertConvertBaseNonIntegerExpectedValues = new AssertConvertBaseNonIntegerExpectedValues();
                }
                return this.mAssertConvertBaseNonIntegerExpectedValues;
            }
        }
        
        public virtual ConvertBaseIrrationalNumberParams ConvertBaseIrrationalNumberParams
        {
            get
            {
                if ((this.mConvertBaseIrrationalNumberParams == null))
                {
                    this.mConvertBaseIrrationalNumberParams = new ConvertBaseIrrationalNumberParams();
                }
                return this.mConvertBaseIrrationalNumberParams;
            }
        }
        
        public virtual AssertConverBaseIrrationalNUmberExpectedValues AssertConverBaseIrrationalNUmberExpectedValues
        {
            get
            {
                if ((this.mAssertConverBaseIrrationalNUmberExpectedValues == null))
                {
                    this.mAssertConverBaseIrrationalNUmberExpectedValues = new AssertConverBaseIrrationalNUmberExpectedValues();
                }
                return this.mAssertConverBaseIrrationalNUmberExpectedValues;
            }
        }
        
        public virtual ConvertBaseIrrationalBaseParams ConvertBaseIrrationalBaseParams
        {
            get
            {
                if ((this.mConvertBaseIrrationalBaseParams == null))
                {
                    this.mConvertBaseIrrationalBaseParams = new ConvertBaseIrrationalBaseParams();
                }
                return this.mConvertBaseIrrationalBaseParams;
            }
        }
        
        public virtual AssertConvertToBaseIrrationalBaseExpectedValues AssertConvertToBaseIrrationalBaseExpectedValues
        {
            get
            {
                if ((this.mAssertConvertToBaseIrrationalBaseExpectedValues == null))
                {
                    this.mAssertConvertToBaseIrrationalBaseExpectedValues = new AssertConvertToBaseIrrationalBaseExpectedValues();
                }
                return this.mAssertConvertToBaseIrrationalBaseExpectedValues;
            }
        }
        
        public virtual ConvertToBaseDecimalBaseParams ConvertToBaseDecimalBaseParams
        {
            get
            {
                if ((this.mConvertToBaseDecimalBaseParams == null))
                {
                    this.mConvertToBaseDecimalBaseParams = new ConvertToBaseDecimalBaseParams();
                }
                return this.mConvertToBaseDecimalBaseParams;
            }
        }
        
        public virtual AssertConvertToBaseDecimalBaseExpectedValues AssertConvertToBaseDecimalBaseExpectedValues
        {
            get
            {
                if ((this.mAssertConvertToBaseDecimalBaseExpectedValues == null))
                {
                    this.mAssertConvertToBaseDecimalBaseExpectedValues = new AssertConvertToBaseDecimalBaseExpectedValues();
                }
                return this.mAssertConvertToBaseDecimalBaseExpectedValues;
            }
        }
        
        public virtual ConvertBaseWithFunctionAsBaseParams ConvertBaseWithFunctionAsBaseParams
        {
            get
            {
                if ((this.mConvertBaseWithFunctionAsBaseParams == null))
                {
                    this.mConvertBaseWithFunctionAsBaseParams = new ConvertBaseWithFunctionAsBaseParams();
                }
                return this.mConvertBaseWithFunctionAsBaseParams;
            }
        }
        
        public virtual AssertConvertBaseWithFunctionAsBaseExpectedValues AssertConvertBaseWithFunctionAsBaseExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBaseWithFunctionAsBaseExpectedValues == null))
                {
                    this.mAssertConvertBaseWithFunctionAsBaseExpectedValues = new AssertConvertBaseWithFunctionAsBaseExpectedValues();
                }
                return this.mAssertConvertBaseWithFunctionAsBaseExpectedValues;
            }
        }
        
        public virtual ConvertBaseButtonParams ConvertBaseButtonParams
        {
            get
            {
                if ((this.mConvertBaseButtonParams == null))
                {
                    this.mConvertBaseButtonParams = new ConvertBaseButtonParams();
                }
                return this.mConvertBaseButtonParams;
            }
        }
        
        public virtual AssertConvertBaseButtonExpectedValues AssertConvertBaseButtonExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBaseButtonExpectedValues == null))
                {
                    this.mAssertConvertBaseButtonExpectedValues = new AssertConvertBaseButtonExpectedValues();
                }
                return this.mAssertConvertBaseButtonExpectedValues;
            }
        }
        
        public virtual AssertConvertBaseButtonEmptyInputExpectedValues AssertConvertBaseButtonEmptyInputExpectedValues
        {
            get
            {
                if ((this.mAssertConvertBaseButtonEmptyInputExpectedValues == null))
                {
                    this.mAssertConvertBaseButtonEmptyInputExpectedValues = new AssertConvertBaseButtonEmptyInputExpectedValues();
                }
                return this.mAssertConvertBaseButtonEmptyInputExpectedValues;
            }
        }
        
        public virtual ConvertBaseFunctionAsNumberParams ConvertBaseFunctionAsNumberParams
        {
            get
            {
                if ((this.mConvertBaseFunctionAsNumberParams == null))
                {
                    this.mConvertBaseFunctionAsNumberParams = new ConvertBaseFunctionAsNumberParams();
                }
                return this.mConvertBaseFunctionAsNumberParams;
            }
        }
        
        public virtual AssertConverBaseFunctionAsNumberExpectedValues AssertConverBaseFunctionAsNumberExpectedValues
        {
            get
            {
                if ((this.mAssertConverBaseFunctionAsNumberExpectedValues == null))
                {
                    this.mAssertConverBaseFunctionAsNumberExpectedValues = new AssertConverBaseFunctionAsNumberExpectedValues();
                }
                return this.mAssertConverBaseFunctionAsNumberExpectedValues;
            }
        }
        
        public virtual ConstPiParams ConstPiParams
        {
            get
            {
                if ((this.mConstPiParams == null))
                {
                    this.mConstPiParams = new ConstPiParams();
                }
                return this.mConstPiParams;
            }
        }
        
        public virtual AssertConstPiExpectedValues AssertConstPiExpectedValues
        {
            get
            {
                if ((this.mAssertConstPiExpectedValues == null))
                {
                    this.mAssertConstPiExpectedValues = new AssertConstPiExpectedValues();
                }
                return this.mAssertConstPiExpectedValues;
            }
        }
        
        public virtual AssertSpeedOfLightExpectedValues AssertSpeedOfLightExpectedValues
        {
            get
            {
                if ((this.mAssertSpeedOfLightExpectedValues == null))
                {
                    this.mAssertSpeedOfLightExpectedValues = new AssertSpeedOfLightExpectedValues();
                }
                return this.mAssertSpeedOfLightExpectedValues;
            }
        }
        
        public virtual AssertConstEarthGravityExpectedValues AssertConstEarthGravityExpectedValues
        {
            get
            {
                if ((this.mAssertConstEarthGravityExpectedValues == null))
                {
                    this.mAssertConstEarthGravityExpectedValues = new AssertConstEarthGravityExpectedValues();
                }
                return this.mAssertConstEarthGravityExpectedValues;
            }
        }
        
        public virtual AssertBoltzmansConstExpectedValues AssertBoltzmansConstExpectedValues
        {
            get
            {
                if ((this.mAssertBoltzmansConstExpectedValues == null))
                {
                    this.mAssertBoltzmansConstExpectedValues = new AssertBoltzmansConstExpectedValues();
                }
                return this.mAssertBoltzmansConstExpectedValues;
            }
        }
        
        public virtual AssertGasConstExpectedValues AssertGasConstExpectedValues
        {
            get
            {
                if ((this.mAssertGasConstExpectedValues == null))
                {
                    this.mAssertGasConstExpectedValues = new AssertGasConstExpectedValues();
                }
                return this.mAssertGasConstExpectedValues;
            }
        }
        
        public virtual Fibonacci_Zero_InputParams Fibonacci_Zero_InputParams
        {
            get
            {
                if ((this.mFibonacci_Zero_InputParams == null))
                {
                    this.mFibonacci_Zero_InputParams = new Fibonacci_Zero_InputParams();
                }
                return this.mFibonacci_Zero_InputParams;
            }
        }
        
        public virtual Assert_Fibonacci_Zero_InputExpectedValues Assert_Fibonacci_Zero_InputExpectedValues
        {
            get
            {
                if ((this.mAssert_Fibonacci_Zero_InputExpectedValues == null))
                {
                    this.mAssert_Fibonacci_Zero_InputExpectedValues = new Assert_Fibonacci_Zero_InputExpectedValues();
                }
                return this.mAssert_Fibonacci_Zero_InputExpectedValues;
            }
        }
        
        public virtual Fibonacci_Negative_InputParams Fibonacci_Negative_InputParams
        {
            get
            {
                if ((this.mFibonacci_Negative_InputParams == null))
                {
                    this.mFibonacci_Negative_InputParams = new Fibonacci_Negative_InputParams();
                }
                return this.mFibonacci_Negative_InputParams;
            }
        }
        
        public virtual Assert_Fibonacci_Negative_InputExpectedValues Assert_Fibonacci_Negative_InputExpectedValues
        {
            get
            {
                if ((this.mAssert_Fibonacci_Negative_InputExpectedValues == null))
                {
                    this.mAssert_Fibonacci_Negative_InputExpectedValues = new Assert_Fibonacci_Negative_InputExpectedValues();
                }
                return this.mAssert_Fibonacci_Negative_InputExpectedValues;
            }
        }
        
        public virtual Fibonacci_Large_InputParams Fibonacci_Large_InputParams
        {
            get
            {
                if ((this.mFibonacci_Large_InputParams == null))
                {
                    this.mFibonacci_Large_InputParams = new Fibonacci_Large_InputParams();
                }
                return this.mFibonacci_Large_InputParams;
            }
        }
        
        public virtual Assert_Fibonacci_Large_InputExpectedValues Assert_Fibonacci_Large_InputExpectedValues
        {
            get
            {
                if ((this.mAssert_Fibonacci_Large_InputExpectedValues == null))
                {
                    this.mAssert_Fibonacci_Large_InputExpectedValues = new Assert_Fibonacci_Large_InputExpectedValues();
                }
                return this.mAssert_Fibonacci_Large_InputExpectedValues;
            }
        }
        
        public virtual Fibonacci_Fibonacci_InputParams Fibonacci_Fibonacci_InputParams
        {
            get
            {
                if ((this.mFibonacci_Fibonacci_InputParams == null))
                {
                    this.mFibonacci_Fibonacci_InputParams = new Fibonacci_Fibonacci_InputParams();
                }
                return this.mFibonacci_Fibonacci_InputParams;
            }
        }
        
        public virtual Asser_Fibonacci_Fibonacci_InputExpectedValues Asser_Fibonacci_Fibonacci_InputExpectedValues
        {
            get
            {
                if ((this.mAsser_Fibonacci_Fibonacci_InputExpectedValues == null))
                {
                    this.mAsser_Fibonacci_Fibonacci_InputExpectedValues = new Asser_Fibonacci_Fibonacci_InputExpectedValues();
                }
                return this.mAsser_Fibonacci_Fibonacci_InputExpectedValues;
            }
        }
        
        public virtual Fibonacci_Decimal_InputParams Fibonacci_Decimal_InputParams
        {
            get
            {
                if ((this.mFibonacci_Decimal_InputParams == null))
                {
                    this.mFibonacci_Decimal_InputParams = new Fibonacci_Decimal_InputParams();
                }
                return this.mFibonacci_Decimal_InputParams;
            }
        }
        
        public virtual Assert_Fibonacci_Decimal_InputExpectedValues Assert_Fibonacci_Decimal_InputExpectedValues
        {
            get
            {
                if ((this.mAssert_Fibonacci_Decimal_InputExpectedValues == null))
                {
                    this.mAssert_Fibonacci_Decimal_InputExpectedValues = new Assert_Fibonacci_Decimal_InputExpectedValues();
                }
                return this.mAssert_Fibonacci_Decimal_InputExpectedValues;
            }
        }
        
        public virtual Asser_Fibonacci_Irrational_InputExpectedValues Asser_Fibonacci_Irrational_InputExpectedValues
        {
            get
            {
                if ((this.mAsser_Fibonacci_Irrational_InputExpectedValues == null))
                {
                    this.mAsser_Fibonacci_Irrational_InputExpectedValues = new Asser_Fibonacci_Irrational_InputExpectedValues();
                }
                return this.mAsser_Fibonacci_Irrational_InputExpectedValues;
            }
        }
        
        public virtual Assert_Fibonacci_Function_InputExpectedValues Assert_Fibonacci_Function_InputExpectedValues
        {
            get
            {
                if ((this.mAssert_Fibonacci_Function_InputExpectedValues == null))
                {
                    this.mAssert_Fibonacci_Function_InputExpectedValues = new Assert_Fibonacci_Function_InputExpectedValues();
                }
                return this.mAssert_Fibonacci_Function_InputExpectedValues;
            }
        }
        
        public virtual Fibonacci_ans_InputParams Fibonacci_ans_InputParams
        {
            get
            {
                if ((this.mFibonacci_ans_InputParams == null))
                {
                    this.mFibonacci_ans_InputParams = new Fibonacci_ans_InputParams();
                }
                return this.mFibonacci_ans_InputParams;
            }
        }
        
        public virtual Asser_Fibonacci_ans_InputExpectedValues Asser_Fibonacci_ans_InputExpectedValues
        {
            get
            {
                if ((this.mAsser_Fibonacci_ans_InputExpectedValues == null))
                {
                    this.mAsser_Fibonacci_ans_InputExpectedValues = new Asser_Fibonacci_ans_InputExpectedValues();
                }
                return this.mAsser_Fibonacci_ans_InputExpectedValues;
            }
        }
        
        public virtual Fibonacci_UndefinedVariable_InputParams Fibonacci_UndefinedVariable_InputParams
        {
            get
            {
                if ((this.mFibonacci_UndefinedVariable_InputParams == null))
                {
                    this.mFibonacci_UndefinedVariable_InputParams = new Fibonacci_UndefinedVariable_InputParams();
                }
                return this.mFibonacci_UndefinedVariable_InputParams;
            }
        }
        
        public virtual Asser_Fibonacci_UndefinedVariable_InputExpectedValues Asser_Fibonacci_UndefinedVariable_InputExpectedValues
        {
            get
            {
                if ((this.mAsser_Fibonacci_UndefinedVariable_InputExpectedValues == null))
                {
                    this.mAsser_Fibonacci_UndefinedVariable_InputExpectedValues = new Asser_Fibonacci_UndefinedVariable_InputExpectedValues();
                }
                return this.mAsser_Fibonacci_UndefinedVariable_InputExpectedValues;
            }
        }
        
        public virtual Fibonacci_NULL_InputParams Fibonacci_NULL_InputParams
        {
            get
            {
                if ((this.mFibonacci_NULL_InputParams == null))
                {
                    this.mFibonacci_NULL_InputParams = new Fibonacci_NULL_InputParams();
                }
                return this.mFibonacci_NULL_InputParams;
            }
        }
        
        public virtual Asser_Fibonacci_NULL_InputExpectedValues Asser_Fibonacci_NULL_InputExpectedValues
        {
            get
            {
                if ((this.mAsser_Fibonacci_NULL_InputExpectedValues == null))
                {
                    this.mAsser_Fibonacci_NULL_InputExpectedValues = new Asser_Fibonacci_NULL_InputExpectedValues();
                }
                return this.mAsser_Fibonacci_NULL_InputExpectedValues;
            }
        }
        
        public UIGraphCalcWindow UIGraphCalcWindow
        {
            get
            {
                if ((this.mUIGraphCalcWindow == null))
                {
                    this.mUIGraphCalcWindow = new UIGraphCalcWindow();
                }
                return this.mUIGraphCalcWindow;
            }
        }
        
        public UIEquationErrorWindow UIEquationErrorWindow
        {
            get
            {
                if ((this.mUIEquationErrorWindow == null))
                {
                    this.mUIEquationErrorWindow = new UIEquationErrorWindow();
                }
                return this.mUIEquationErrorWindow;
            }
        }
        
        public UIGrphCalcWindow UIGrphCalcWindow
        {
            get
            {
                if ((this.mUIGrphCalcWindow == null))
                {
                    this.mUIGrphCalcWindow = new UIGrphCalcWindow();
                }
                return this.mUIGrphCalcWindow;
            }
        }
        
        public UIRuntimeErrorWindow UIRuntimeErrorWindow
        {
            get
            {
                if ((this.mUIRuntimeErrorWindow == null))
                {
                    this.mUIRuntimeErrorWindow = new UIRuntimeErrorWindow();
                }
                return this.mUIRuntimeErrorWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private AdditionParams mAdditionParams;
        
        private AssertAdditionExpectedValues mAssertAdditionExpectedValues;
        
        private AssertConvertBase1to36ExpectedValues mAssertConvertBase1to36ExpectedValues;
        
        private AssertConvertBaseConvertBaseExpectedValues mAssertConvertBaseConvertBaseExpectedValues;
        
        private AssertConvertToBase37ExpectedValues mAssertConvertToBase37ExpectedValues;
        
        private AssertConvertToBaseZeroExpectedValues mAssertConvertToBaseZeroExpectedValues;
        
        private AssertConveryBinaryNullExpectedValues mAssertConveryBinaryNullExpectedValues;
        
        private AssertCosBasicExpectedValues mAssertCosBasicExpectedValues;
        
        private AssertDivisionExpectedValues mAssertDivisionExpectedValues;
        
        private AssertEmptyEntryExpectedValues mAssertEmptyEntryExpectedValues;
        
        private AssertMultiplicationExpectedValues mAssertMultiplicationExpectedValues;
        
        private AssertNonFunctionExpectedValues mAssertNonFunctionExpectedValues;
        
        private AssertNonFunctionZeroExpectedValues mAssertNonFunctionZeroExpectedValues;
        
        private AssertNumberedButtonsExpectedValues mAssertNumberedButtonsExpectedValues;
        
        private AssertOneToBinaryExpectedValues mAssertOneToBinaryExpectedValues;
        
        private AssertPowersExpectedValues mAssertPowersExpectedValues;
        
        private AssertSinBasicExpectedValues mAssertSinBasicExpectedValues;
        
        private AssertSquareRootExpectedValues mAssertSquareRootExpectedValues;
        
        private AssertSubtractionExpectedValues mAssertSubtractionExpectedValues;
        
        private AssertTanBasicExpectedValues mAssertTanBasicExpectedValues;
        
        private AssertZeroToBinaryExpectedValues mAssertZeroToBinaryExpectedValues;
        
        private ConvertBase100000Params mConvertBase100000Params;
        
        private ConvertBase1to36Params mConvertBase1to36Params;
        
        private ConvertBaseConvertBaseParams mConvertBaseConvertBaseParams;
        
        private ConvertBaseNegativeParams mConvertBaseNegativeParams;
        
        private ConvertToBase37Params mConvertToBase37Params;
        
        private ConvertToBaseZeroParams mConvertToBaseZeroParams;
        
        private CosBasicParams mCosBasicParams;
        
        private DivisionParams mDivisionParams;
        
        private MultiplicationParams mMultiplicationParams;
        
        private NonFunctionParams mNonFunctionParams;
        
        private PowerParams mPowerParams;
        
        private SquareRootParams mSquareRootParams;
        
        private SubtractionParams mSubtractionParams;
        
        private ZeroConvertToBinaryParams mZeroConvertToBinaryParams;
        
        private ConvertBase1Params mConvertBase1Params;
        
        private ConvertBaseBetweenBasesParams mConvertBaseBetweenBasesParams;
        
        private AssertConvertBaseBetweenBasesExpectedValues mAssertConvertBaseBetweenBasesExpectedValues;
        
        private ConvertBaseNegativeNumberParams mConvertBaseNegativeNumberParams;
        
        private AssertConvertBaseNegativeNumberExpectedValues mAssertConvertBaseNegativeNumberExpectedValues;
        
        private ConvertBaseNonIntegerParams mConvertBaseNonIntegerParams;
        
        private AssertConvertBaseNonIntegerExpectedValues mAssertConvertBaseNonIntegerExpectedValues;
        
        private ConvertBaseIrrationalNumberParams mConvertBaseIrrationalNumberParams;
        
        private AssertConverBaseIrrationalNUmberExpectedValues mAssertConverBaseIrrationalNUmberExpectedValues;
        
        private ConvertBaseIrrationalBaseParams mConvertBaseIrrationalBaseParams;
        
        private AssertConvertToBaseIrrationalBaseExpectedValues mAssertConvertToBaseIrrationalBaseExpectedValues;
        
        private ConvertToBaseDecimalBaseParams mConvertToBaseDecimalBaseParams;
        
        private AssertConvertToBaseDecimalBaseExpectedValues mAssertConvertToBaseDecimalBaseExpectedValues;
        
        private ConvertBaseWithFunctionAsBaseParams mConvertBaseWithFunctionAsBaseParams;
        
        private AssertConvertBaseWithFunctionAsBaseExpectedValues mAssertConvertBaseWithFunctionAsBaseExpectedValues;
        
        private ConvertBaseButtonParams mConvertBaseButtonParams;
        
        private AssertConvertBaseButtonExpectedValues mAssertConvertBaseButtonExpectedValues;
        
        private AssertConvertBaseButtonEmptyInputExpectedValues mAssertConvertBaseButtonEmptyInputExpectedValues;
        
        private ConvertBaseFunctionAsNumberParams mConvertBaseFunctionAsNumberParams;
        
        private AssertConverBaseFunctionAsNumberExpectedValues mAssertConverBaseFunctionAsNumberExpectedValues;
        
        private ConstPiParams mConstPiParams;
        
        private AssertConstPiExpectedValues mAssertConstPiExpectedValues;
        
        private AssertSpeedOfLightExpectedValues mAssertSpeedOfLightExpectedValues;
        
        private AssertConstEarthGravityExpectedValues mAssertConstEarthGravityExpectedValues;
        
        private AssertBoltzmansConstExpectedValues mAssertBoltzmansConstExpectedValues;
        
        private AssertGasConstExpectedValues mAssertGasConstExpectedValues;
        
        private Fibonacci_Zero_InputParams mFibonacci_Zero_InputParams;
        
        private Assert_Fibonacci_Zero_InputExpectedValues mAssert_Fibonacci_Zero_InputExpectedValues;
        
        private Fibonacci_Negative_InputParams mFibonacci_Negative_InputParams;
        
        private Assert_Fibonacci_Negative_InputExpectedValues mAssert_Fibonacci_Negative_InputExpectedValues;
        
        private Fibonacci_Large_InputParams mFibonacci_Large_InputParams;
        
        private Assert_Fibonacci_Large_InputExpectedValues mAssert_Fibonacci_Large_InputExpectedValues;
        
        private Fibonacci_Fibonacci_InputParams mFibonacci_Fibonacci_InputParams;
        
        private Asser_Fibonacci_Fibonacci_InputExpectedValues mAsser_Fibonacci_Fibonacci_InputExpectedValues;
        
        private Fibonacci_Decimal_InputParams mFibonacci_Decimal_InputParams;
        
        private Assert_Fibonacci_Decimal_InputExpectedValues mAssert_Fibonacci_Decimal_InputExpectedValues;
        
        private Asser_Fibonacci_Irrational_InputExpectedValues mAsser_Fibonacci_Irrational_InputExpectedValues;
        
        private Assert_Fibonacci_Function_InputExpectedValues mAssert_Fibonacci_Function_InputExpectedValues;
        
        private Fibonacci_ans_InputParams mFibonacci_ans_InputParams;
        
        private Asser_Fibonacci_ans_InputExpectedValues mAsser_Fibonacci_ans_InputExpectedValues;
        
        private Fibonacci_UndefinedVariable_InputParams mFibonacci_UndefinedVariable_InputParams;
        
        private Asser_Fibonacci_UndefinedVariable_InputExpectedValues mAsser_Fibonacci_UndefinedVariable_InputExpectedValues;
        
        private Fibonacci_NULL_InputParams mFibonacci_NULL_InputParams;
        
        private Asser_Fibonacci_NULL_InputExpectedValues mAsser_Fibonacci_NULL_InputExpectedValues;
        
        private UIGraphCalcWindow mUIGraphCalcWindow;
        
        private UIEquationErrorWindow mUIEquationErrorWindow;
        
        private UIGrphCalcWindow mUIGrphCalcWindow;
        
        private UIRuntimeErrorWindow mUIRuntimeErrorWindow;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Addition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AdditionParams
    {
        
        #region Fields
        /// <summary>
        /// Select '1+2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "1+2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAddition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertAdditionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1+2
        ///3
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1+2\n3\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBase1to36'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBase1to36ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0 convbase1
        ///01
        ///0convbase2
        ///02
        ///0convbase3
        ///03
        ///0convbase4
        ///04
        ///0convbase5
        ///05
        ///0convbase6
        ///06
        ///0convbase7
        ///07
        ///0convbase8
        ///08
        ///0convbase9
        ///09
        ///0convbase10
        ///010
        ///0convbase11
        ///011
        ///0convbase12
        ///012
        ///0convbase13
        ///013
        ///0convbase14
        ///014
        ///0convbase14
        ///014
        ///0convbase15
        ///015
        ///0convbase16
        ///016
        ///0convbase17
        ///017
        ///0convbase18
        ///018
        ///0convbase19
        ///019
        ///0convbase20
        ///020
        ///0convbase21
        ///021
        ///0convbase22
        ///022
        ///0convbase23
        ///023
        ///0convbase24
        ///024
        ///0convbase25
        ///025
        ///0convbase26
        ///026
        ///0convbase27
        ///027
        ///0convbase28
        ///028
        ///0convbase29
        ///029
        ///0convbase30
        ///030
        ///0convbase31
        ///031
        ///0convbase32
        ///032
        ///0convbase33
        ///033
        ///0convbase34
        ///034
        ///0convbase35
        ///035
        ///0convbase36
        ///036
        ///
        ///'
        /// </summary>
        public string UIItemEditText = @"0 convbase1
01
0convbase2
02
0convbase3
03
0convbase4
04
0convbase5
05
0convbase6
06
0convbase7
07
0convbase8
08
0convbase9
09
0convbase10
010
0convbase11
011
0convbase12
012
0convbase13
013
0convbase14
014
0convbase14
014
0convbase15
015
0convbase16
016
0convbase17
017
0convbase18
018
0convbase19
019
0convbase20
020
0convbase21
021
0convbase22
022
0convbase23
023
0convbase24
024
0convbase25
025
0convbase26
026
0convbase27
027
0convbase28
028
0convbase29
029
0convbase30
030
0convbase31
031
0convbase32
032
0convbase33
033
0convbase34
034
0convbase35
035
0convbase36
036

";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBaseConvertBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBaseConvertBaseExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '12 convbase2 convbase 3 convbase2
        ///1,1002
        ///12 convbase2
        ///1,1002
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "12 convbase2 convbase 3 convbase2\n1,1002\n12 convbase2\n1,1002\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertToBase37'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertToBase37ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '4convbase37
        ///437
        ///38convbase37
        ///1137
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "4convbase37\n437\n38convbase37\n1137\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertToBaseZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertToBaseZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '
        ///'
        /// </summary>
        public string UIItemEditText = "\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConveryBinaryNull'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConveryBinaryNullExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box is not equal to 'ans convbase2
        ///02
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "ans convbase2\n02\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCosBasic'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertCosBasicExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'cos 57
        ///0.54463903501502
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "cos 57\n0.54463903501502\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDivision'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertDivisionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '77/11
        ///7
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "77/11\n7\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEmptyEntry'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertEmptyEntryExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1+2
        ///3
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1+2\n3\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMultiplication'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMultiplicationExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '99999*99999
        ///9,999,800,001
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "99999*99999\n9,999,800,001\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNonFunction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertNonFunctionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '9999999999
        ///9,999,999,999
        ///99999999999999999999999
        ///1.000000e+023
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "9999999999\n9,999,999,999\n99999999999999999999999\n1.000000e+023\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNonFunctionZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertNonFunctionZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0
        ///0
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "0\n0\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNumberedButtons'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertNumberedButtonsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1234567890
        ///1,234,567,890
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1234567890\n1,234,567,890\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOneToBinary'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOneToBinaryExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1 convbase 2
        ///12
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "1 convbase 2\n12\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertPowers'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertPowersExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '9^9
        ///387,420,489
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "9^9\n387,420,489\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSinBasic'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSinBasicExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'sin 57
        ///0.83867056794542
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "sin 57\n0.83867056794542\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSquareRoot'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSquareRootExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'sqrt 2
        ///1.4142135623731
        ///sqrt 3
        ///1.73205080756888
        ///sqrt 4
        ///2
        ///sqrt 5
        ///2.23606797749979
        ///sqrt 6
        ///2.44948974278318
        ///sqrt 7
        ///2.6457513110646
        ///sqrt 8
        ///2.8284271247462
        ///sqrt 9
        ///3
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "sqrt 2\n1.4142135623731\nsqrt 3\n1.73205080756888\nsqrt 4\n2\nsqrt 5\n2.23606797749979\ns" +
            "qrt 6\n2.44948974278318\nsqrt 7\n2.6457513110646\nsqrt 8\n2.8284271247462\nsqrt 9\n3\n\r\n" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSubtraction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSubtractionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '20-30
        ///-10
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "20-30\n-10\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTanBasic'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTanBasicExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'tan 57
        ///1.53986496381459
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "tan 57\n1.53986496381459\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertZeroToBinary'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertZeroToBinaryExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '0 convbase2
        ///02
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "0 convbase2\n02\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBase100000'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBase100000Params
    {
        
        #region Fields
        /// <summary>
        /// Select '4convbase100000' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4convbase100000";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBase1to36'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBase1to36Params
    {
        
        #region Fields
        /// <summary>
        /// Select '0 convbase1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "0 convbase1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select '0convbase2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "0convbase2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase3' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem2 = "0convbase3";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase4' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem3 = "0convbase4";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase5' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem4 = "0convbase5";
        
        /// <summary>
        /// Type 'Control + a' in text box
        /// </summary>
        public string UIItemEditSendKeys4 = "a";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase6' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem5 = "0convbase6";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase7' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem6 = "0convbase7";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase8' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem7 = "0convbase8";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase9' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem8 = "0convbase9";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys9 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase10' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem9 = "0convbase10";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys10 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase11' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem10 = "0convbase11";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys11 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase12' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem11 = "0convbase12";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys12 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase13' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem12 = "0convbase13";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys13 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase14' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem13 = "0convbase14";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys14 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase14' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem14 = "0convbase14";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys15 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase15' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem15 = "0convbase15";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys16 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase16' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem16 = "0convbase16";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys17 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase17' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem17 = "0convbase17";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys18 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase18' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem18 = "0convbase18";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys19 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase19' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem19 = "0convbase19";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys20 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase20' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem20 = "0convbase20";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys21 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase21' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem21 = "0convbase21";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys22 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase22' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem22 = "0convbase22";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys23 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase23' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem23 = "0convbase23";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys24 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase24' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem24 = "0convbase24";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys25 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase25' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem25 = "0convbase25";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys26 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase26' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem26 = "0convbase26";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys27 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase27' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem27 = "0convbase27";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys28 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase28' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem28 = "0convbase28";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys29 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase29' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem29 = "0convbase29";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys30 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase30' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem30 = "0convbase30";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys31 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase31' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem31 = "0convbase31";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys32 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase32' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem32 = "0convbase32";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys33 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase33' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem33 = "0convbase33";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys34 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase34' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem34 = "0convbase34";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys35 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase35' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem35 = "0convbase35";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys36 = "{Enter}";
        
        /// <summary>
        /// Select '0convbase36' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem36 = "0convbase36";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys37 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseConvertBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseConvertBaseParams
    {
        
        #region Fields
        /// <summary>
        /// Select '12 convbase2 ' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "12 convbase2 ";
        
        /// <summary>
        /// Type '{Right}' in 'Insert' popup menu
        /// </summary>
        public string UIInsertMenuSendKeys = "{Right}";
        
        /// <summary>
        /// Select '12 convbase2 convbase 3 convbase2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "12 convbase2 convbase 3 convbase2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select '12 convbase2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem2 = "12 convbase2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseNegative'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseNegativeParams
    {
        
        #region Fields
        /// <summary>
        /// Select '4convbase-1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4convbase-1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertToBase37'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertToBase37Params
    {
        
        #region Fields
        /// <summary>
        /// Select '4convbase37' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4convbase37";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select '38convbase37' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "38convbase37";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertToBaseZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertToBaseZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Select '4convbase0' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4convbase0";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CosBasic'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CosBasicParams
    {
        
        #region Fields
        /// <summary>
        /// Select '' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "";
        
        /// <summary>
        /// Type '{Back}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Back}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Division'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DivisionParams
    {
        
        #region Fields
        /// <summary>
        /// Select '77/11' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "77/11";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Multiplication'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiplicationParams
    {
        
        #region Fields
        /// <summary>
        /// Select '99999*99999' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "99999*99999";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NonFunction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NonFunctionParams
    {
        
        #region Fields
        /// <summary>
        /// Select '9999999999' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "9999999999";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select '99999999999999999999999' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "99999999999999999999999";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Power'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PowerParams
    {
        
        #region Fields
        /// <summary>
        /// Select '9^9' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "9^9";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SquareRoot'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SquareRootParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'sqrt 2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "sqrt 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Subtraction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SubtractionParams
    {
        
        #region Fields
        /// <summary>
        /// Select '20-30' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "20-30";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ZeroConvertToBinary'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ZeroConvertToBinaryParams
    {
        
        #region Fields
        /// <summary>
        /// Select '0' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBase1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '4convbase1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4convbase1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select '4convbase1' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "4convbase1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseBetweenBases'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseBetweenBasesParams
    {
        
        #region Fields
        /// <summary>
        /// Select '4convbase2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "4convbase2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'ans convbase5' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "ans convbase5";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'ans conbase20' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem2 = "ans conbase20";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Select 'ans convbase 20' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem3 = "ans convbase 20";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Select 'ans convbase2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem4 = "ans convbase2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBaseBetweenBases'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBaseBetweenBasesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '4convbase2
        ///1002
        ///ans convbase5
        ///45
        ///ans convbase 20
        ///420
        ///ans convbase2
        ///1002
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "4convbase2\n1002\nans convbase5\n45\nans convbase 20\n420\nans convbase2\n1002\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseNegativeNumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseNegativeNumberParams
    {
        
        #region Fields
        /// <summary>
        /// Select '-20 convbase 2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "-20 convbase 2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBaseNegativeNumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBaseNegativeNumberExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '-20 convbase 2
        ///-10,1002
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "-20 convbase 2\n-10,1002\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseNonInteger'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseNonIntegerParams
    {
        
        #region Fields
        /// <summary>
        /// Select '3.333 convbase 2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "3.333 convbase 2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBaseNonInteger'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBaseNonIntegerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '3.333 convbase 2
        ///11.01010101001111110111110011101101100100010110100012
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "3.333 convbase 2\n11.01010101001111110111110011101101100100010110100012\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseIrrationalNumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseIrrationalNumberParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'sqrt 2 convbase 2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "sqrt 2 convbase 2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'sqrt 3 convbase 2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "sqrt 3 convbase 2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConverBaseIrrationalNUmber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConverBaseIrrationalNUmberExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'sqrt 2 convbase 2
        ///1.011010100000100111100110011001111111001110111100112
        ///sqrt 3 convbase 2
        ///1.101110110110011110101110100001011000010011001010112
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "sqrt 2 convbase 2\n1.011010100000100111100110011001111111001110111100112\nsqrt 3 co" +
            "nvbase 2\n1.101110110110011110101110100001011000010011001010112\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseIrrationalBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseIrrationalBaseParams
    {
        
        #region Fields
        /// <summary>
        /// Select '15 convbase ' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "15 convbase ";
        
        /// <summary>
        /// Select '15 convbase sqrt 2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "15 convbase sqrt 2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertToBaseIrrationalBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertToBaseIrrationalBaseExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'GrphCalc' title bar is not equal to 'True'
        /// </summary>
        public bool UIGrphCalcTitleBarExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertToBaseDecimalBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertToBaseDecimalBaseParams
    {
        
        #region Fields
        /// <summary>
        /// Select '15 convbase1.5' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "15 convbase1.5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertToBaseDecimalBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertToBaseDecimalBaseExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '
        ///'
        /// </summary>
        public string UIItemEditText = "\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseWithFunctionAsBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseWithFunctionAsBaseParams
    {
        
        #region Fields
        /// <summary>
        /// Select '15 convbase(1+3-1)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "15 convbase(1+3-1)";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select '15 convbase (1+1)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "15 convbase (1+1)";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBaseWithFunctionAsBase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBaseWithFunctionAsBaseExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '15 convbase(1+3-1)
        ///1203
        ///15 convbase (1+1)
        ///1,1112
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "15 convbase(1+3-1)\n1203\n15 convbase (1+1)\n1,1112\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Select '15 ' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "15 ";
        
        /// <summary>
        /// Select '12345678' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "12345678";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBaseButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBaseButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '15  convbase 2
        ///1,1112
        ///12345678 convbase 36
        ///7C,LZI36
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "15  convbase 2\n1,1112\n12345678 convbase 36\n7C,LZI36\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConvertBaseButtonEmptyInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConvertBaseButtonEmptyInputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals ''
        /// </summary>
        public string UIItemEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConvertBaseFunctionAsNumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConvertBaseFunctionAsNumberParams
    {
        
        #region Fields
        /// <summary>
        /// Select '(20*100*0+15)convbase2' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "(20*100*0+15)convbase2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConverBaseFunctionAsNumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConverBaseFunctionAsNumberExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(20*100*0+15)convbase2
        ///1,1112
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(20*100*0+15)convbase2\n1,1112\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConstPi'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConstPiParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConstPi'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConstPiExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(Math|pi)
        ///3.1415926535898
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(Math|pi)\n3.1415926535898\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSpeedOfLight'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSpeedOfLightExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(Physics|c (m/s))
        ///299,792,458
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(Physics|c (m/s))\n299,792,458\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConstEarthGravity'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertConstEarthGravityExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(Physics|g)
        ///9.80665
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(Physics|g)\n9.80665\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBoltzmansConst'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertBoltzmansConstExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(Physics|Boltzman's constant (J/K))
        ///1.380658e-023
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(Physics|Boltzman\'s constant (J/K))\n1.380658e-023\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertGasConst'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertGasConstExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '(Physics|gas constant)
        ///8.31451
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "(Physics|gas constant)\n8.31451\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_Zero_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_Zero_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select '' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "";
        
        /// <summary>
        /// Select 'fib(0)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "fib(0)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Fibonacci_Zero_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Fibonacci_Zero_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Runtime Error' title bar equals 'Runtime Error'
        /// </summary>
        public string UIRuntimeErrorTitleBarDisplayText = "Runtime Error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_Negative_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_Negative_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'fib(-1)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "fib(-1)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Fibonacci_Negative_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Fibonacci_Negative_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Runtime Error' title bar equals 'Runtime Error'
        /// </summary>
        public string UIRuntimeErrorTitleBarDisplayText = "Runtime Error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_Large_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_Large_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'fib(999999999999999999999999999999)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "fib(999999999999999999999999999999)";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Fibonacci_Large_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Fibonacci_Large_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ERROR: You must enter a positive integer for a fib...' label is not equal to 'ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)
        ///EQUATION ENTERED: fib(999999999999999999999999999999)'
        /// </summary>
        public string UIERRORYoumustenterapoTextDisplayText = "ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)\nEQUAT" +
            "ION ENTERED: fib(999999999999999999999999999999)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_Fibonacci_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_Fibonacci_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'fib(fib(6))' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "fib(fib(6))";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Asser_Fibonacci_Fibonacci_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Asser_Fibonacci_Fibonacci_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'fib(fib(6))
        ///21
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "fib(fib(6))\n21\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_Decimal_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_Decimal_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'fib(3.5)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "fib(3.5)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Fibonacci_Decimal_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Fibonacci_Decimal_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ERROR: You must enter a positive integer for a fib...' label equals 'ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)
        ///EQUATION ENTERED: fib(3.5)'
        /// </summary>
        public string UIERRORYoumustenterapoText1DisplayText = "ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)\nEQUAT" +
            "ION ENTERED: fib(3.5)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Asser_Fibonacci_Irrational_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Asser_Fibonacci_Irrational_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ERROR: You must enter a positive integer for a fib...' label equals 'ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)
        ///EQUATION ENTERED: fib(sqrt 2)'
        /// </summary>
        public string UIERRORYoumustenterapoText2DisplayText = "ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)\nEQUAT" +
            "ION ENTERED: fib(sqrt 2)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Fibonacci_Function_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Fibonacci_Function_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box is not equal to 'fib(7*8-6+1)
        ///-1,109,825,406
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "fib(7*8-6+1)\n-1,109,825,406\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_ans_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_ans_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'fib(ans)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "fib(ans)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Asser_Fibonacci_ans_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Asser_Fibonacci_ans_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '6
        ///6
        ///fib(ans)
        ///8
        ///
        ///'
        /// </summary>
        public string UIItemEditText = "6\n6\nfib(ans)\n8\n\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_UndefinedVariable_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_UndefinedVariable_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'fib(j)' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "fib(j)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Asser_Fibonacci_UndefinedVariable_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Asser_Fibonacci_UndefinedVariable_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ERROR: Undefined constant EQUATION ENTERED: fib(j)' label equals 'ERROR: Undefined constant
        ///EQUATION ENTERED: fib(j)'
        /// </summary>
        public string UIERRORUndefinedconstaTextDisplayText = "ERROR: Undefined constant\nEQUATION ENTERED: fib(j)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Fibonacci_NULL_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Fibonacci_NULL_InputParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'fib()' in combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "fib()";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Asser_Fibonacci_NULL_Input'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Asser_Fibonacci_NULL_InputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ERROR: Empty set of parenthesis EQUATION ENTERED: ...' label equals 'ERROR: Empty set of parenthesis
        ///EQUATION ENTERED: fib()'
        /// </summary>
        public string UIERROREmptysetofparenTextDisplayText = "ERROR: Empty set of parenthesis\nEQUATION ENTERED: fib()";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGraphCalcWindow : WinWindow
    {
        
        public UIGraphCalcWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GraphCalc";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public WinControl UIGraphCalcDialog
        {
            get
            {
                if ((this.mUIGraphCalcDialog == null))
                {
                    this.mUIGraphCalcDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIGraphCalcDialog.SearchProperties[UITestControl.PropertyNames.Name] = "GraphCalc";
                    this.mUIGraphCalcDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIGraphCalcDialog.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIGraphCalcDialog;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIApplicationMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new UIApplicationMenuBar(this);
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinMenu UIInsertMenu
        {
            get
            {
                if ((this.mUIInsertMenu == null))
                {
                    this.mUIInsertMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUIInsertMenu.SearchProperties[WinMenu.PropertyNames.Name] = "Insert";
                    this.mUIInsertMenu.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIInsertMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private WinControl mUIGraphCalcDialog;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIApplicationMenuBar mUIApplicationMenuBar;
        
        private WinMenu mUIInsertMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1003";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIApplicationMenuBar : WinMenuBar
    {
        
        public UIApplicationMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        
        public WinMenuItem UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOptionsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Options";
                    this.mUIOptionsMenuItem.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIOptionsMenuItem;
            }
        }
        
        public UIInsertMenuItem UIInsertMenuItem
        {
            get
            {
                if ((this.mUIInsertMenuItem == null))
                {
                    this.mUIInsertMenuItem = new UIInsertMenuItem(this);
                }
                return this.mUIInsertMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEditMenuItem mUIEditMenuItem;
        
        private WinMenuItem mUIOptionsMenuItem;
        
        private UIInsertMenuItem mUIInsertMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public UIClearMenuItem UIClearMenuItem
        {
            get
            {
                if ((this.mUIClearMenuItem == null))
                {
                    this.mUIClearMenuItem = new UIClearMenuItem(this);
                }
                return this.mUIClearMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClearMenuItem mUIClearMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIClearMenuItem : WinMenuItem
    {
        
        public UIClearMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Clear";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOutputMenuItem
        {
            get
            {
                if ((this.mUIOutputMenuItem == null))
                {
                    this.mUIOutputMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOutputMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Output";
                    this.mUIOutputMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOutputMenuItem.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIOutputMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOutputMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInsertMenuItem : WinMenuItem
    {
        
        public UIInsertMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Insert";
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public UIConvertToBaseMenuItem UIConvertToBaseMenuItem
        {
            get
            {
                if ((this.mUIConvertToBaseMenuItem == null))
                {
                    this.mUIConvertToBaseMenuItem = new UIConvertToBaseMenuItem(this);
                }
                return this.mUIConvertToBaseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIConvertToBaseMenuItem mUIConvertToBaseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConvertToBaseMenuItem : WinMenuItem
    {
        
        public UIConvertToBaseMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Convert To Base";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("GraphCalc");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIBinaryMenuItem
        {
            get
            {
                if ((this.mUIBinaryMenuItem == null))
                {
                    this.mUIBinaryMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIBinaryMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Binary";
                    this.mUIBinaryMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBinaryMenuItem.WindowTitles.Add("GraphCalc");
                    #endregion
                }
                return this.mUIBinaryMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIBinaryMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEquationErrorWindow : WinWindow
    {
        
        public UIEquationErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Equation Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Equation Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIEquationErrorTitleBar UIEquationErrorTitleBar
        {
            get
            {
                if ((this.mUIEquationErrorTitleBar == null))
                {
                    this.mUIEquationErrorTitleBar = new UIEquationErrorTitleBar(this);
                }
                return this.mUIEquationErrorTitleBar;
            }
        }
        
        public UIERROREmptysetofparenWindow UIERROREmptysetofparenWindow
        {
            get
            {
                if ((this.mUIERROREmptysetofparenWindow == null))
                {
                    this.mUIERROREmptysetofparenWindow = new UIERROREmptysetofparenWindow(this);
                }
                return this.mUIERROREmptysetofparenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        
        private UIEquationErrorTitleBar mUIEquationErrorTitleBar;
        
        private UIERROREmptysetofparenWindow mUIERROREmptysetofparenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Equation Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Equation Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEquationErrorTitleBar : WinTitleBar
    {
        
        public UIEquationErrorTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Equation Error");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Equation Error");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIERROREmptysetofparenWindow : WinWindow
    {
        
        public UIERROREmptysetofparenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Equation Error");
            #endregion
        }
        
        #region Properties
        public WinText UIERROREmptysetofparenText
        {
            get
            {
                if ((this.mUIERROREmptysetofparenText == null))
                {
                    this.mUIERROREmptysetofparenText = new WinText(this);
                    #region Search Criteria
                    this.mUIERROREmptysetofparenText.SearchProperties[WinText.PropertyNames.Name] = "ERROR: Empty set of parenthesisEQUATION ENTERED: fib()";
                    this.mUIERROREmptysetofparenText.WindowTitles.Add("Equation Error");
                    #endregion
                }
                return this.mUIERROREmptysetofparenText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIERROREmptysetofparenText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrphCalcWindow : WinWindow
    {
        
        public UIGrphCalcWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GrphCalc";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("GrphCalc");
            #endregion
        }
        
        #region Properties
        public UIGrphCalcPane UIGrphCalcPane
        {
            get
            {
                if ((this.mUIGrphCalcPane == null))
                {
                    this.mUIGrphCalcPane = new UIGrphCalcPane(this);
                }
                return this.mUIGrphCalcPane;
            }
        }
        
        public WinTitleBar UIGrphCalcTitleBar
        {
            get
            {
                if ((this.mUIGrphCalcTitleBar == null))
                {
                    this.mUIGrphCalcTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIGrphCalcTitleBar.WindowTitles.Add("GrphCalc");
                    #endregion
                }
                return this.mUIGrphCalcTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIGrphCalcPane mUIGrphCalcPane;
        
        private WinTitleBar mUIGrphCalcTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGrphCalcPane : WinPane
    {
        
        public UIGrphCalcPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "GrphCalc";
            this.WindowTitles.Add("GrphCalc");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseprogramButton
        {
            get
            {
                if ((this.mUICloseprogramButton == null))
                {
                    this.mUICloseprogramButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseprogramButton.SearchProperties[WinButton.PropertyNames.Name] = "Close program";
                    this.mUICloseprogramButton.WindowTitles.Add("GrphCalc");
                    #endregion
                }
                return this.mUICloseprogramButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseprogramButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRuntimeErrorWindow : WinWindow
    {
        
        public UIRuntimeErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Runtime Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Runtime Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public WinTitleBar UIRuntimeErrorTitleBar
        {
            get
            {
                if ((this.mUIRuntimeErrorTitleBar == null))
                {
                    this.mUIRuntimeErrorTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIRuntimeErrorTitleBar.WindowTitles.Add("Runtime Error");
                    #endregion
                }
                return this.mUIRuntimeErrorTitleBar;
            }
        }
        
        public UIERRORYoumustenterapoWindow UIERRORYoumustenterapoWindow
        {
            get
            {
                if ((this.mUIERRORYoumustenterapoWindow == null))
                {
                    this.mUIERRORYoumustenterapoWindow = new UIERRORYoumustenterapoWindow(this);
                }
                return this.mUIERRORYoumustenterapoWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        
        private WinTitleBar mUIRuntimeErrorTitleBar;
        
        private UIERRORYoumustenterapoWindow mUIERRORYoumustenterapoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Runtime Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Runtime Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIERRORYoumustenterapoWindow : WinWindow
    {
        
        public UIERRORYoumustenterapoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Runtime Error");
            #endregion
        }
        
        #region Properties
        public WinText UIERRORYoumustenterapoText
        {
            get
            {
                if ((this.mUIERRORYoumustenterapoText == null))
                {
                    this.mUIERRORYoumustenterapoText = new WinText(this);
                    #region Search Criteria
                    this.mUIERRORYoumustenterapoText.SearchProperties[WinText.PropertyNames.Name] = "ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)EQUATI" +
                        "ON ENTERED: fib(999999999999999999999999999999)";
                    this.mUIERRORYoumustenterapoText.WindowTitles.Add("Runtime Error");
                    #endregion
                }
                return this.mUIERRORYoumustenterapoText;
            }
        }
        
        public WinText UIERRORYoumustenterapoText1
        {
            get
            {
                if ((this.mUIERRORYoumustenterapoText1 == null))
                {
                    this.mUIERRORYoumustenterapoText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIERRORYoumustenterapoText1.SearchProperties[WinText.PropertyNames.Name] = "ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)EQUATI" +
                        "ON ENTERED: fib(3.5)";
                    this.mUIERRORYoumustenterapoText1.WindowTitles.Add("Runtime Error");
                    #endregion
                }
                return this.mUIERRORYoumustenterapoText1;
            }
        }
        
        public WinText UIERRORYoumustenterapoText2
        {
            get
            {
                if ((this.mUIERRORYoumustenterapoText2 == null))
                {
                    this.mUIERRORYoumustenterapoText2 = new WinText(this);
                    #region Search Criteria
                    this.mUIERRORYoumustenterapoText2.SearchProperties[WinText.PropertyNames.Name] = "ERROR: You must enter a positive integer for a fibonacci number - eg fib(6)EQUATI" +
                        "ON ENTERED: fib(sqrt 2)";
                    this.mUIERRORYoumustenterapoText2.WindowTitles.Add("Runtime Error");
                    #endregion
                }
                return this.mUIERRORYoumustenterapoText2;
            }
        }
        
        public WinText UIERRORUndefinedconstaText
        {
            get
            {
                if ((this.mUIERRORUndefinedconstaText == null))
                {
                    this.mUIERRORUndefinedconstaText = new WinText(this);
                    #region Search Criteria
                    this.mUIERRORUndefinedconstaText.SearchProperties[WinText.PropertyNames.Name] = "ERROR: Undefined constantEQUATION ENTERED: fib(j)";
                    this.mUIERRORUndefinedconstaText.WindowTitles.Add("Runtime Error");
                    #endregion
                }
                return this.mUIERRORUndefinedconstaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIERRORYoumustenterapoText;
        
        private WinText mUIERRORYoumustenterapoText1;
        
        private WinText mUIERRORYoumustenterapoText2;
        
        private WinText mUIERRORUndefinedconstaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIConvertToBaseMenuItem1 UIConvertToBaseMenuItem
        {
            get
            {
                if ((this.mUIConvertToBaseMenuItem == null))
                {
                    this.mUIConvertToBaseMenuItem = new UIConvertToBaseMenuItem1(this);
                }
                return this.mUIConvertToBaseMenuItem;
            }
        }
        
        public UIMathMenuItem UIMathMenuItem
        {
            get
            {
                if ((this.mUIMathMenuItem == null))
                {
                    this.mUIMathMenuItem = new UIMathMenuItem(this);
                }
                return this.mUIMathMenuItem;
            }
        }
        
        public UIPhysicsMenuItem UIPhysicsMenuItem
        {
            get
            {
                if ((this.mUIPhysicsMenuItem == null))
                {
                    this.mUIPhysicsMenuItem = new UIPhysicsMenuItem(this);
                }
                return this.mUIPhysicsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIConvertToBaseMenuItem1 mUIConvertToBaseMenuItem;
        
        private UIMathMenuItem mUIMathMenuItem;
        
        private UIPhysicsMenuItem mUIPhysicsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConvertToBaseMenuItem1 : WinMenuItem
    {
        
        public UIConvertToBaseMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Convert To Base ->";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIBinaryMenuItem
        {
            get
            {
                if ((this.mUIBinaryMenuItem == null))
                {
                    this.mUIBinaryMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIBinaryMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Binary";
                    this.mUIBinaryMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIBinaryMenuItem;
            }
        }
        
        public WinMenuItem UIItem36MenuItem
        {
            get
            {
                if ((this.mUIItem36MenuItem == null))
                {
                    this.mUIItem36MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIItem36MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "36";
                    this.mUIItem36MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIItem36MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIBinaryMenuItem;
        
        private WinMenuItem mUIItem36MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMathMenuItem : WinMenuItem
    {
        
        public UIMathMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Math";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIPIMenuItem
        {
            get
            {
                if ((this.mUIPIMenuItem == null))
                {
                    this.mUIPIMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPIMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "pi";
                    this.mUIPIMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIPIMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIPIMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPhysicsMenuItem : WinMenuItem
    {
        
        public UIPhysicsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Physics";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICmsMenuItem
        {
            get
            {
                if ((this.mUICmsMenuItem == null))
                {
                    this.mUICmsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICmsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "c (m/s)";
                    this.mUICmsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICmsMenuItem;
            }
        }
        
        public WinMenuItem UIGMenuItem
        {
            get
            {
                if ((this.mUIGMenuItem == null))
                {
                    this.mUIGMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIGMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "g";
                    this.mUIGMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIGMenuItem;
            }
        }
        
        public WinMenuItem UIBoltzmansconstantJKMenuItem
        {
            get
            {
                if ((this.mUIBoltzmansconstantJKMenuItem == null))
                {
                    this.mUIBoltzmansconstantJKMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIBoltzmansconstantJKMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Boltzman\'s constant (J/K)";
                    this.mUIBoltzmansconstantJKMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIBoltzmansconstantJKMenuItem;
            }
        }
        
        public WinMenuItem UIGasconstantMenuItem
        {
            get
            {
                if ((this.mUIGasconstantMenuItem == null))
                {
                    this.mUIGasconstantMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIGasconstantMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "gas constant";
                    this.mUIGasconstantMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIGasconstantMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICmsMenuItem;
        
        private WinMenuItem mUIGMenuItem;
        
        private WinMenuItem mUIBoltzmansconstantJKMenuItem;
        
        private WinMenuItem mUIGasconstantMenuItem;
        #endregion
    }
}
